/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.Catalog.Product );
importPackage( dw.util );
importPackage( dw.value );
importScript("app_mns:/product/ProductSetPriceCalculation.ds");

/* function get product pricing information */
function getPriceAttributes(productHit : Product):Object{
	var product :Product = productHit.product ;
	var pricing = new Object();
	var salesprice ;
	var minprice ;
	var maxprice;
	var varProduct :Product ;
	var pricemodel :ProductPriceModel  ;
	var standardprice;
	if(product.productSet){
		    
		if(product.custom.productSetPriceIndicator != null){
			
			/** INT-450 - PIM - New product set indicators - comment out the previous logic
			if(product.custom.productSetPriceIndicator == '0'){
			salesprice = product.getPriceModel().getMinPrice();
			}else if(product.custom.productSetPriceIndicator == '1'){
			salesprice =product.getProductSetProducts()[0].getPriceModel().getMinPrice();	//comment - NEEDS TO BE TESTED
			**/
			
			/** INT-450 - PIM - New product set indicators - new logic for indicator 3 **/
			if(product.custom.productSetPriceIndicator == '3'){
				salesprice = product.getPriceModel().getMinPrice();
			}else if(product.custom.productSetPriceIndicator == '2'){
			//INT-448 - PIM calculate product set price for suits only
			//salesprice	= product.custom.productSetPrice ;
				var setTotalPrices : HashMap = getProductSetPrice(product);
									
				var minPriceTotal:Money =  setTotalPrices.get("setMinPriceTotal");
				var minProductPrice:Money = setTotalPrices.get("minProductPrice");
				if(minPriceTotal.available)
					psPrice = minPriceTotal;
				else
					psPrice = minProductPrice;
			}else{
				//do nothing  
			}
			pricing.PriceMin = salesprice.value;/*storing sales price in both price max and price min */
			pricing.PriceMax = salesprice.value;/*storing sales price in both price max and price min */
			pricing.standardPrice = "";
		}
	}else if(product.master && productHit.priceRange){
			minprice = productHit.minPrice;
			maxprice = productHit.maxPrice;
			pricing.PriceMin = minprice.value;/*storing price max and price min  if price range is available*/
			pricing.PriceMax = maxprice.value;/*storing price max and price min  if price range is available*/
			pricing.standardPrice = "";
		}else{
			if(product.master && !productHit.priceRange){
				product = productHit.firstRepresentedProduct ;
			}
		
		if(product.optionProduct){
			pricemodel =varProduct.getPriceModel(varProduct.getOptionModel());
		}else{
			pricemodel =product.getPriceModel();
		}
		if(! pricemodel.getPrice().available){
			standardprice = "";
		}else if(!empty(dw.system.Site.current.preferences.custom.listPriceDefault)){
			standardprice=pricemodel.getPriceBookPrice(dw.system.Site.current.preferences.custom.listPriceDefault);
		}else{
			standardprice = pricemodel.getPriceBookPrice('list-prices');
		}
		salesprice = pricemodel.getPrice();
			pricing.PriceMin = salesprice.value;/*storing sales price in both price max and price min */
			pricing.PriceMax = salesprice.value;/*storing sales price in both price max and price min */
			pricing.standardPrice =standardprice.value;/*standard price will be displayed only if it is not empty and is not equal to sales price */
	}
	
return pricing;	
	 
}	
