/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* 
*
*   @input PaymentInstruments : dw.util.Collection
*   @input CurrentCustomer : dw.customer.Customer
*   @output customObject : Object
*
*/
importPackage( dw.system );
importPackage(dw.util);
importPackage(dw.customer);

function execute( args : PipelineDictionary ) : Number
{ 
	var currentCustomer = args.CurrentCustomer ;
	var paymentInstruments : dw.util.Collection = args.PaymentInstruments ;
	var customerDetails  = new Object();
	customerDetails.personalDetails =null;
	var personalDetails = new Object();
	var cal : Calendar = new Calendar();
	cal.setTime(currentCustomer.profile.birthday);
	customerDetails.addressDetails = new Array();
	customerDetails.cardDetails = new Array();
	personalDetails.title =currentCustomer.profile.title;
	personalDetails.firstName =currentCustomer.profile.firstName;
	personalDetails.lastName =currentCustomer.profile.lastName;
	if(currentCustomer.profile.birthday !=null){
	personalDetails.birthday =StringUtils.formatCalendar(cal);
	}
	personalDetails.email =currentCustomer.profile.email;
	
	if(empty(currentCustomer.profile.custom.isVirtualBasket)){
		personalDetails.isVirtualBasket = "false";//As a part of eBoutique requirement ID VB01
	}else{  
		personalDetails.isVirtualBasket = currentCustomer.profile.custom.isVirtualBasket.toString();
	}  
	customerDetails.personalDetails = personalDetails;
	

	var addressObj;
	for each(var address in currentCustomer.profile.addressBook.addresses){	
		    addressObj =new Object();//
			
			addressObj.addressID=address.ID;
			addressObj.title=address.title;
			addressObj.firstName=address.firstName;
			addressObj.lastName=address.lastName;
			addressObj.buildingNumber=address.address1;
			addressObj.streetName=address.custom.streetName;
			addressObj.flatNumber=address.address2;
			addressObj.residence=address.custom.residence;
			addressObj.postBox=address.postBox;
			addressObj.postalCode=address.postalCode;
			addressObj.city=address.city;
			addressObj.countryCode=address.countryCode.value;
			addressObj.phone=address.phone;
			addressObj.alternateContactNumber=address.custom.alternateContactNumber;
			if(currentCustomer.profile.addressBook.preferredAddress.ID == address.ID){
				addressObj.isPreferredAddress = "true";
			}else{
				addressObj.isPreferredAddress = "false";
			}
			//Praveen : Changes to return the address if the delivery country is UK
			if("UK".equalsIgnoreCase(address.countryCode.value)){
				addressObj.flatNumber=null;
				addressObj.address2=address.address2;
				addressObj.buildingNumber=null;
				addressObj.address1=address.address1;	
				addressObj.address3 = address.custom.address3;
				addressObj.county = address.stateCode;
			}
			customerDetails.addressDetails.push(addressObj);
	}
		 var paymentCardObj;
		//if(paymentDetails.size() > 0){
	for each(var paymentCard in paymentInstruments){
			 paymentCardObj = new Object();
		 	paymentCardObj.paymentCardID=paymentCard.UUID;
		 	paymentCardObj.creditCardType=paymentCard.creditCardType;
			paymentCardObj.creditCardExpirationMonth=paymentCard.creditCardExpirationMonth;
			paymentCardObj.creditCardExpirationYear=paymentCard.creditCardExpirationYear;
			if(paymentCard.creditCardType.equalsIgnoreCase('amex')){
			paymentCardObj.creditCardValidFromMonth=paymentCard.creditCardValidFromMonth;
			paymentCardObj.creditCardValidFromYear=paymentCard.creditCardValidFromYear;
			}
			paymentCardObj.creditCardHolder=paymentCard.creditCardHolder;
			paymentCardObj.creditCardIssueNumber=paymentCard.creditCardIssueNumber;
			paymentCardObj.creditCardNumber=paymentCard.creditCardNumber;
			
			paymentCardObj.maskedCreditCardNumber=paymentCard.maskedCreditCardNumber;
			paymentCardObj.paymentMethod=paymentCard.paymentMethod;
			
		
		customerDetails.cardDetails.push(paymentCardObj);
	}
	 args.customObject = customerDetails ;
   return PIPELET_NEXT;
}
