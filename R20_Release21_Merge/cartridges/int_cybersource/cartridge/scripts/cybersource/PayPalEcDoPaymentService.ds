/**
* Demandware Script File
* Script for calling the EcDoPayment Service
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* @input shipTo : Object
* @input billTo : Object  
* @input OrderNo : String The order no
* @input purchaseTotals : Object
* @input paypalToken : String
* @input requestId : String
* @input requestToken : String
* @input paypalPayerId : String
* @input PayPalPayerStatus : String
* @input PayPalAddressStatus : String
* @input lineItemList : dw.util.ArrayList
* @input  sessionID : String 
* @output DoPaymentRequestID : String The request id generated by Cybersource
* @output DoPaymentRequestToken : String the token generated by Cybersource
* @output DoPaymentDecision : String decision returned by Cybersource
* @output DoPaymentReasonCode : dw.util.BigInteger Reason Code returned by Cybersource
* @output DoPaymentAuthorizationId : String TransactionId returned by Cybersource
* @output DoPaymentAuthAmount: String Amount returned by Cybersource
* @output StatusMessage : String
* @output OmnitureMessage : String
*/

importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util ); 
importPackage( dw.customer );

importScript('cybersource/libCybersource.ds');
importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_MerchantDefinedData_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	var shipTo: ShipTo_Object = pdict.shipTo;
	var billTo: BillTo_Object = pdict.billTo;
	var orderNo : String = pdict.OrderNo;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var lineItemList : ArrayList = pdict.lineItemList;
	var merchantDefinedData: MerchantDefinedData_Object = new MerchantDefinedData_Object();
    var CybersourceHelper = getCybersourceHelper();
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	CybersourceHelper.setEndpoint(service);
	if(!CybersourceHelper.createPayPalHeader(service)){
			return PIPELET_ERROR;
	}
	var request = new csReference.RequestMessage();
	
	request.merchantID = CybersourceHelper.getPaypalMerchantID();
	request.billTo = __copyBillTo( billTo );
	request.shipTo = __copyShipTo( shipTo );
	request.deviceFingerprintID = pdict.sessionID;
	__setClientData( request, orderNo );  
	request.purchaseTotals = __copyPurchaseTotals(purchaseObject);		
	request.payPalEcDoPaymentService = new CybersourceHelper.csReference.PayPalEcDoPaymentService(); 
	request.payPalEcDoPaymentService.run = true;
	request.payPalEcDoPaymentService.paypalToken = pdict.paypalToken;
	request.payPalEcDoPaymentService.paypalEcSetRequestToken = pdict.requestToken;
	request.payPalEcDoPaymentService.paypalEcSetRequestID = pdict.requestId;
	request.payPalEcDoPaymentService.paypalPayerId = pdict.paypalPayerId; 
	request.payPalEcDoPaymentService.paypalCustomerEmail = billTo.email;
	//INT 846: passing custom fields to request to help with Cybersource Decision Manager fraud analysis
	merchantDefinedData.setField6(pdict.paypalPayerId);
	merchantDefinedData.setField7(pdict.PayPalPayerStatus);
	merchantDefinedData.setField8(pdict.PayPalAddressStatus);
	request.merchantDefinedData = 	__copyMerchantDefinedData( merchantDefinedData );
	
	var iterator : dw.util.Iterator = lineItemList.iterator();
	var items : Array = new Array();
	var counter : Number = 0;
	while(iterator.hasNext())
	{
		var item = new CybersourceHelper.csReference.Item();
		var itemObject : Item_Object = iterator.next();
		item.id = counter;
		
		if (itemObject.getProductCode().search("coupon") == 0)
			{
				item.productCode = itemObject.getProductCode();
				item.productSKU = itemObject.getProductSKU();
			}
				item.unitPrice = StringUtils.formatNumber(itemObject.getUnitPrice(),"000000.00","en_US");
				item.quantity = itemObject.getQuanity();
				item.productName = itemObject.getProductName();				

		items.push(item);
		counter++;
	}
	request.item = items;
	
	var response = null;
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[PayPalEcDoPaymentService.ds] Error in PayPal request ( {0} )",e.message);
		pdict.StatusMessage="[PayPalEcDoPaymentService.ds] Error in PayPal request ( {0} )"+e.message;
		pdict.OmnitureMessage = "paypalerror";
		if(e.message.indexOf("SocketTimeoutException") != -1) {
            pdict.reasonCode = 999; //set timeout error code 999
            return PIPELET_NEXT;
		}       
		
		if(empty(response) || response.decision == null || response.reasonCode == null) {	
			pdict.StatusMessage = "Empty response , Error Message::"+e.message;		
			pdict.DoPaymentDecision = "ERROR";
		}
	}
	if(response == null) {
		Logger.getRootLogger().fatal("[PayPalEcDoPaymentService.ds] Error in PayPal request: null response");		
		pdict.StatusMessage="PayPalEcDoPaymentService.ds Null Response";
		pdict.OmnitureMessage = "paypalerror";
		pdict.DoPaymentDecision = "ERROR";
		return PIPELET_ERROR;
	}
	if (response.reasonCode != "100") {		
		pdict.OmnitureMessage = "paypalerror";		
	} 
	pdict.DoPaymentRequestID = response.requestID;
	pdict.DoPaymentRequestToken = response.requestToken;
	pdict.DoPaymentReasonCode = response.reasonCode;
	pdict.DoPaymentAuthorizationId = response.payPalEcDoPaymentReply.transactionId;
	pdict.DoPaymentAuthAmount = response.payPalEcDoPaymentReply.paypalAmount;	
	Logger.warn("PayPalEcDoPaymentService: orderNo : "+orderNo + "|RequestID:" + response.requestID +"|PayPalEcDoPaymentService: Decision : "+ response.decision +"|PayPalEcDoPaymentService: ReasonCode : " + response.reasonCode + "|PayPalEcDoPaymentService: error code  : "+response.payPalEcDoPaymentReply.errorCode);
	
	if(!empty(response.payPalEcDoPaymentReply.errorCode)&& response.reasonCode == 387 && response.payPalEcDoPaymentReply.errorCode == 100486){
		pdict.DoPaymentDecision = "REJECT";
	}else{	
		pdict.DoPaymentDecision = response.decision;
	}  

   return PIPELET_NEXT;
}
