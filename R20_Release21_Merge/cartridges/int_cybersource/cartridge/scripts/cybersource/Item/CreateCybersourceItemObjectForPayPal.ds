/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:

*	 @input ipAddress : String
*    @input Basket : dw.order.Basket
*    @input ReadFromBasket : Boolean
*    @input prodIDAndNameMap : dw.util.HashMap
*	 @input locale : String
*	 @output lineItemList : dw.util.ArrayList
*	 
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.order );
importScript('cybersource/Cybersource_Item_Object.ds');
function execute( pdict : PipelineDictionary ) : Number
{
	var basket : Basket = pdict.Basket;
	var lineItemList : ArrayList = new ArrayList;
	var prodIDAndNameMap : HashMap = pdict.prodIDAndNameMap;
	var items : Array = new Array();
	var discount : String = dw.web.Resource.msg('paypal.discount','checkout',null);
	var language : String = pdict.locale.substr(0, 2);
	
	//Loop through the product line items and add them as item objects to the line item list
	getProductLineItems(basket,lineItemList,prodIDAndNameMap,items,discount);
	 //Loop through the shipment(s) of the order and add them to a line item
	getOrderShipments(basket,lineItemList,prodIDAndNameMap,items,discount);
	//Find Price adjustments and add to a line item
	getPriceAdjustments(basket,lineItemList,prodIDAndNameMap,items,discount);
	//Find any coupons that hae been applied to the order and add to a line item
	//getCoupons(basket,lineItemList,prodIDAndNameMap,items);
	//Find any order wide price adjustments and add to a line item
	getOrderPriceAdjustments(basket,lineItemList,prodIDAndNameMap,items,discount);
	//Add the line item list to the pipeline dictionary	
	pdict.lineItemList = lineItemList;
	return PIPELET_NEXT;
}
//Function to find individual product discounts and add them to a new line item
function getProductDiscounts(productLineItem: ProductLineItem,basket : Basket,lineItemList : ArrayList,prodIDAndNameMap : HashMap,items : Array, discount : String){
	var productPriceAdjustments : Iterator = productLineItem.priceAdjustments.iterator();
	while(productPriceAdjustments.hasNext()){
		var itemObject : Item_Object = new Item_Object();
		var productPriceAdjustment : PriceAdjustment = productPriceAdjustments.next();
		//if(productPriceAdjustment.basedOnCoupon == false){
			Logger.error("pli"+productPriceAdjustment.campaignID);
			itemObject.setProductCode("coupon");
			itemObject.setProductSKU(discount);
			itemObject.setUnitPrice(productPriceAdjustment.grossPrice.value.toString().replace("-", ""));
			itemObject.setQuanity("1");
			itemObject.setProductName(productPriceAdjustment.campaignID);
			lineItemList.add(itemObject);
		//}
	}
}
//Funtion to loop through products and add each to a line item
function getProductLineItems(basket : Basket,lineItemList : ArrayList,prodIDAndNameMap : HashMap,items : Array, discount : String){
	var productLineItems : Iterator = basket.getAllProductLineItems().iterator();
	while(productLineItems.hasNext()){
		var productLineItem : ProductLineItem = productLineItems.next();
		var itemObject : Item_Object = new Item_Object();
		itemObject.setProductSKU(productLineItem.product.custom.tNumber);
		itemObject.setProductCode(productLineItem.product.custom.tNumber);
		if(prodIDAndNameMap != null && prodIDAndNameMap.containsKey(productLineItem.product.ID)){
			itemObject.setProductName(prodIDAndNameMap.get(productLineItem.product.ID));	
		}else{
			itemObject.setProductName(productLineItem.product.name);
		}
		itemObject.setUnitPrice(productLineItem.basePrice.value);
		itemObject.setQuanity(productLineItem.quantity.value);
		lineItemList.add(itemObject);
		
		// for each product, loop through the price adjustments to add discounts/ promotions as another line item
		// for displaying in the paypal screen
		if(productLineItem.priceAdjustments != null){
			getProductDiscounts(productLineItem,basket,lineItemList,prodIDAndNameMap,items, discount);
		}
	}
}
//Function to loop through the shipment(s) and add each to a line item
function getOrderShipments(basket : Basket,lineItemList : ArrayList,prodIDAndNameMap : HashMap,items : Array, discount : String){
	var shipmentsItems : Iterator = basket.shipments.iterator();	
	while(shipmentsItems.hasNext()){
		var shipmentsLineItem : Shipment = shipmentsItems.next();
		var itemObject : Item_Object = new Item_Object();
		itemObject.setProductName(shipmentsLineItem.shippingMethod.displayName);	
		itemObject.setUnitPrice(basket.getShippingTotalPrice().value);
		itemObject.setQuanity("1");
		lineItemList.add(itemObject);		
	}
}	
//Function to loop through Price Adjustments and add to line item(s)
function getPriceAdjustments(basket : Basket,lineItemList : ArrayList,prodIDAndNameMap : HashMap,items : Array, discount : String){
	var adjustmentsLineItems : Iterator = basket.allShippingPriceAdjustments.iterator();	
	while(adjustmentsLineItems.hasNext()){
		var priceAdjustmentLineItem : PriceAdjustment = adjustmentsLineItems.next();
		var itemObject : Item_Object = new Item_Object();
		itemObject.setProductCode("coupon");			
		itemObject.setProductSKU(discount);	
		itemObject.setUnitPrice(priceAdjustmentLineItem.grossPrice.value.toString().replace("-", ""));		
		itemObject.setQuanity("1");
		itemObject.setProductName(priceAdjustmentLineItem.campaignID);
		lineItemList.add(itemObject);
		Logger.error("coupon"+priceAdjustmentLineItem.campaignID);
	}	
}
//Function to find any coupons applied to an order and add to line items
function getCoupons(basket : Basket,lineItemList : ArrayList,prodIDAndNameMap : HashMap,items : Array, discount : String){
	var couponLineItems : Iterator = basket.couponLineItems.iterator();	
	while(couponLineItems.hasNext()){
		var couponLineItem : CouponLineItem = couponLineItems.next();
		var itemObject : Item_Object = new Item_Object();
		itemObject.setProductCode("coupon");			
		itemObject.setProductSKU(discount);
		itemObject.setUnitPrice(couponLineItem.priceAdjustments[0].grossPrice.value.toString().replace("-", ""));	
		itemObject.setQuanity("1");
		itemObject.setProductName(couponLineItem.couponCode);
		lineItemList.add(itemObject);
		Logger.error("coupon"+couponLineItem.couponCode);
	}	
}
//Function to find any order wide price adjustments and add to line items
function getOrderPriceAdjustments(basket : Basket,lineItemList : ArrayList,prodIDAndNameMap : HashMap,items : Array, discount : String){
	var orderPriceAdjustments : Iterator = basket.priceAdjustments.iterator();
	while(orderPriceAdjustments.hasNext()){
		var orderPriceAdjustment : PriceAdjustment = orderPriceAdjustments.next();
		//if(orderPriceAdjustment.basedOnCoupon == false){
			var itemObject : Item_Object = new Item_Object();
			itemObject.setProductCode("coupon");
			itemObject.setProductSKU(discount);
			itemObject.setUnitPrice(orderPriceAdjustment.grossPrice.value.toString().replace("-", ""));
			itemObject.setQuanity("1");
			itemObject.setProductName(orderPriceAdjustment.promotionID);
			lineItemList.add(itemObject);
			
		//}
	}
}