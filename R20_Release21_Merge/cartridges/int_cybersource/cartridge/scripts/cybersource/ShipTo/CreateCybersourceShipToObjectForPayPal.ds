/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*    @input Basket : dw.order.Basket
*    @output CybersourceBillTo : Object
*
*/

importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.order );
importScript('cybersource/Cybersource_ShipTo_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{
       var basket : Basket = pdict.Basket;
       var mnsSite : String = Site.current.ID;
       var shipToObject: ShipTo_Object = new ShipTo_Object();
       var shippingAddress : OrderAddress = basket.defaultShipment.shippingAddress;
       var shippingMethod : ShippingMethod = null;
       var address2 : String = null;

       var it : Iterator = basket.getShipments().iterator();
       // TODO: This code purposely does not handle the case of
       // multiple shipments per order
       if(shippingAddress == null){
              while(it.hasNext()){
                     var shipment : Shipment = it.next();
                     shippingAddress = shipment.getShippingAddress();
                     shippingMethod = shipment.getShippingMethod();
                     if(shippingAddress != null){
                           break;
                     }
              }
       }
       if( !empty(shippingAddress) && !empty(basket) ) {
              shipToObject.setFirstName(shippingAddress.firstName);
              shipToObject.setLastName(shippingAddress.lastName);
              if (shippingAddress.address2 == null){
                     address2 = " ";
              }
              else {
                     address2 = shippingAddress.address2;
              }
			  createShipTo(shippingAddress, mnsSite, shipToObject, basket, address2);
              shipToObject.setCounty(shippingAddress.postBox);   
              if (shippingAddress.countryCode.value.equals("MC")){
                  shipToObject.setCountry(dw.web.Resource.msg('country.code','forms',null) );
              } else {
                     shipToObject.setCountry( shippingAddress.countryCode );
        	  }    
              shipToObject.setPhoneNumber(shippingAddress.phone);
              shipToObject.setEmail(basket.customerEmail);
              //QC defect fixing[718]
              shipToObject.setShippingMethod(basket.defaultShipment.shippingMethod.ID);
       }
       pdict.CybersourceBillTo = shipToObject;

    return PIPELET_NEXT;
}

function createShipTo(shippingAddress : OrderAddress, mnsSite : String, shipToObject: ShipTo_Object, basket : Basket, address2 : String){
       if (mnsSite.equalsIgnoreCase("FranceSite")){
              createFranceShipTo(shippingAddress,shipToObject,basket,address2);
       }
       else if (mnsSite.equalsIgnoreCase("IrelandSite")){
              createIrelandShipTo(shippingAddress,shipToObject,basket,address2);
       }
       else if (mnsSite.equalsIgnoreCase("EUSite")){
              createEUShipTo(shippingAddress,shipToObject,basket,address2);
       }
}

function createFranceShipTo(shippingAddress : OrderAddress,shipToObject: ShipTo_Object, basket : Basket, address2 : String){
	var address1:String = null;
	var address3:String = null;
	var postBox:String = null;
	var residence:String = null;
	var streetName:String = null;
	var stateCode:String = null;
       
       if (shippingAddress.address1 == null){
              address1 = " ";
       }
       else {
              address1 = shippingAddress.address1;
       }                    
       if (shippingAddress.postBox === null){
              postBox = " ";
       }
       else {
              postBox = shippingAddress.postBox;
       }
       if (shippingAddress.custom.residence == null){
              residence=" ";
       }
       else {
              residence = shippingAddress.custom.residence;
       }
       if (shippingAddress.custom.streetName == null){
              streetName=" ";
       }
       else {
              streetName = shippingAddress.custom.streetName;
       }
       shipToObject.setStreet1(address1+" "+streetName);
       shipToObject.setStreet2(address2+" " +postBox+ " "+residence);             
       shipToObject.setPostalCode(shippingAddress.postalCode);                    
       shipToObject.setState(shippingAddress.stateCode);      
       if (basket.defaultShipment.shippingMethod.ID == 'STORE_COLLECTION'){
              if (shippingAddress.city == null) {
                     shipToObject.setCity(address1);
              }
              else {
                     shipToObject.setCity(shippingAddress.city);
              }
       } 
       else {
              shipToObject.setCity(shippingAddress.city);
       }

}

function createIrelandShipTo(shippingAddress : OrderAddress,shipToObject: ShipTo_Object, basket : Basket, address2 : String){
	var address1:String = null;
	var address3:String = null;
	var postBox:String = null;
	var residence:String = null;
	var streetName:String = null;
	var stateCode:String = null;
	shipToObject.setStreet1(shippingAddress.address1+" "+address2);
	shipToObject.setStreet2(shippingAddress.postBox);	
	shipToObject.setPostalCode("");		
	shipToObject.setState(shippingAddress.stateCode);
	checkStoreCollection(shippingAddress, shipToObject, basket);
}

function createEUShipTo(shippingAddress : OrderAddress,shipToObject: ShipTo_Object, basket : Basket, address2 : String){
	var address1:String = null;
	var address3:String = null;
	var postBox:String = null;
	var residence:String = null;
	var streetName:String = null;
	var stateCode:String = null;
	shipToObject.setStreet1(shippingAddress.address1+" "+address2);				
	shipToObject.setPostalCode(shippingAddress.postalCode);	
	if (shippingAddress.stateCode === null){
		stateCode = " ";
	}
	else {
		stateCode = shippingAddress.stateCode;
	}
	if (shippingAddress.custom.address3 == null){
		address3=" ";
	}
	else {
		address3 = shippingAddress.custom.address3;
	}
	shipToObject.setStreet2(address3+" "+stateCode);
	checkStoreCollection(shippingAddress, shipToObject, basket);	
}

function checkStoreCollection(shippingAddress : OrderAddress, shipToObject : ShipTo_Object, basket : Basket){
	if (basket.defaultShipment.shippingMethod.ID == 'STORE_COLLECTION'){
		if (shippingAddress.city == null) {
			shipToObject.setCity(shippingAddress.stateCode);
		}
		else {
			shipToObject.setCity(shippingAddress.city);
		}
	} 
	else {
		shipToObject.setCity(shippingAddress.city);
	}
}

