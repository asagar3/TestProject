/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:

*	 @input ipAddress : String
*    @input Basket : dw.order.Basket
*    @input ReadFromBasket : Boolean
*    @output CyberSourceMerchantDefinedData : Object
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.order );
importPackage( dw.object );

importScript('cybersource/Cybersource_MerchantDefinedData_Object.ds');
function execute( pdict : PipelineDictionary ) : Number
{
	var merchantDefinedDataObject: MerchantDefinedData_Object = new MerchantDefinedData_Object();
	
	merchantDefinedDataObject.setField1("web");
	// Changed as part of EU Project. Now picking up the country code from the billing address, enetered during the checkout journey
	// instead of picking the same from sitepreferences. | Naveen Kumar 
	var countryCode = pdict.Basket.billingAddress.countryCode.value;		
	merchantDefinedDataObject.setField3(countryCode);
	merchantDefinedDataObject.setField4("no");
	
	// INT-663 field 5 to add store email address
	
	if(Site.getCurrent().getCustomPreferenceValue('StoreOrderEmail')){
		if(pdict.Basket.customerEmail.toUpperCase().indexOf("@STOREORDER")>0 ||
			pdict.Basket.customerEmail.toUpperCase().indexOf("@STORE.ORDER")>0 ||
			pdict.Basket.customerEmail.toUpperCase().indexOf("@ORDER.MARK")>0){				
		   //isStoreEmail(pdict.Basket.customerEmail) ){ Not used, custom object performence issue
			Logger.error("Store Email found. "+pdict.Basket.customerEmail.toUpperCase()+" Replacing with "+Site.getCurrent().getCustomPreferenceValue('ReplaceSOEmailValue'));
			merchantDefinedDataObject.setField5(pdict.Basket.customerEmail);
			pdict.Basket.setCustomerEmail(Site.getCurrent().getCustomPreferenceValue('ReplaceSOEmailValue'));
		}
	}
	pdict.CyberSourceMerchantDefinedData = merchantDefinedDataObject;
	
    return PIPELET_NEXT;
}


function isStoreEmail(storeEmail : String) : Boolean{
	
	
	var storeEmailList : Collection = CustomObjectMgr.getAllCustomObjects('StoreOrderEmails');
	
	for each(var co : CustomObject in storeEmailList) {
	  	if(co.custom.email.equalsIgnoreCase(storeEmail)){
  			return true;
  		}
	}
		
	return false;
}