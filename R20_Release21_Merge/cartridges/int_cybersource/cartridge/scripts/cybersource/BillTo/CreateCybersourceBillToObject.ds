/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*	 @input BMLForm : dw.web.FormElement
*	 @input ipAddress : String
*    @input Basket : dw.order.Basket
*    @input ReadFromBasket : Boolean
*    @output CyberSourceBillTo : Object
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.order );
importScript('cybersource/Cybersource_BillTo_Object.ds');
function execute( pdict : PipelineDictionary ) : Number
{
	var billToObject: BillTo_Object = new BillTo_Object();
	
	if ( pdict.ReadFromBasket )
	{
		var basket : Basket = pdict.Basket;
		var billingAddress : OrderAddress = basket.billingAddress;

		if( !empty(billingAddress)&&!empty(basket) ) {
			billToObject.setFirstName  ( billingAddress.firstName );
			billToObject.setLastName   ( billingAddress.lastName );
			
			//RCT:3828093, Clubing 'billingAddress.address1' and 'billingAddress.custom.streetName' togather and sending 'billingAddress.custom.residence'
			//in 'street3' while sending the 'street4' blank
			billToObject.setStreet1    ( billingAddress.address1+" "+billingAddress.custom.streetName );
			billToObject.setStreet2    ( billingAddress.address2 );
			billToObject.setStreet3(billingAddress.custom.residence);
			
			/*
			billToObject.setStreet1    ( billingAddress.address1 );
			billToObject.setStreet2    ( billingAddress.address2 );
			billToObject.setStreet3(billingAddress.custom.streetName);
			billToObject.setStreet4(billingAddress.custom.residence);
			*/
			billToObject.setCounty(billingAddress.postBox);
			
			billToObject.setCity       ( billingAddress.city );
			billToObject.setState      ( billingAddress.stateCode );
			billToObject.setPostalCode ( billingAddress.postalCode );
			//CR 3030 : Start of code to Send FR as billing address country code to Cybersource
			if (billingAddress.countryCode.value.equals("MC")){
				billToObject.setCountry(dw.web.Resource.msg('country.code','forms',null) );
			} else {
				billToObject.setCountry( billingAddress.countryCode );
			}
			//CR 3030 : End of code to Send FR as billing address country code to Cybersource
			//billToObject.setCountry    ( "FR");
			billToObject.setPhoneNumber( billingAddress.phone );
			billToObject.setEmail      ( basket.customerEmail );
		//	billToObject.setEmail("review@review.com");
		//	billToObject.setEmail("reject@reject.com");
		}
	}
	else
	{
		var billAddrForm : dw.web.FormElement =  pdict.CurrentForms.billing.billingAddress;
		
		billToObject.setFirstName  ( billAddrForm.addressFields.firstName.value);
		billToObject.setLastName   ( billAddrForm.addressFields.lastName.value);
		//RCT:3828093, Clubing 'billingAddress.address1' and 'billingAddress.custom.streetName' togather and sending 'billingAddress.custom.residence'
		//in 'street3' while sending the 'street4' blank
		billToObject.setStreet1    ( billAddrForm.addressFields.address1.value + " " +billAddrForm.addressFields.custom.streetName);
		billToObject.setStreet2    ( billAddrForm.addressFields.address2.value);
		billToObject.setStreet3(billAddrForm.addressFields.custom.residence);
		
		
		/*billToObject.setStreet1    ( billAddrForm.addressFields.address1.value);
		billToObject.setStreet2    ( billAddrForm.addressFields.address2.value);
		billToObject.setStreet3( billAddrForm.addressFields.custom.streetName);
		billToObject.setStreet4( billAddrForm.addressFields.custom.residence);*/
		billToObject.setCounty( billAddrForm.addressFields.postBox);
		
		billToObject.setCity       ( billAddrForm.addressFields.city.value);
		billToObject.setState      ( billAddrForm.addressFields.states.state.value);
		billToObject.setPostalCode ( billAddrForm.addressFields.zip.value);
		//CR 3030 : Start of code to Send FR as billing address country code to Cybersource
		if (billAddrForm.addressFields.country.value.equals("MC")){
			billToObject.setCountry(dw.web.Resource.msg('country.code','forms',null) );
		} else {
			billToObject.setCountry( billAddrForm.addressFields.country.value);
		}
		//CR 3030 : End of code to Send FR as billing address country code to Cybersource
		billToObject.setPhoneNumber( billAddrForm.addressFields.phone.value);
		billToObject.setEmail(pdict.CurrentForms.checkout.addresses.email.value);
	
	}
	billToObject.setIpAddress(pdict.ipAddress);

	//  @@@@@@@@@@@   BML part @@@@@@@@@@@@@	
	
	if(pdict.BMLForm != null)
	{
		var bmlform :  dw.web.FormElement =  pdict.BMLForm;
		// billToObject.setDateOfBirth("19541217");
		// billToObject.setSsn("000001234"); 
		
		if(bmlform.year.value != null)
		{	
			if (bmlform.year.value.toString() != null && bmlform.year.value.toString() != "")
			{  
				billToObject.setDateOfBirth(bmlform.year.value.toString()+ StringUtils.formatNumber(bmlform.month.value, "00", "en_US") + StringUtils.formatNumber(bmlform.day.value, "00", "en_US"));
				billToObject.setSsn('00000' + bmlform.ssn.value);			
			}
		}
	}
	pdict.CyberSourceBillTo = billToObject;
	/*Logger.error("***************************************************");
	Logger.error("firstName mapped to firstName value is  "+billingAddress.firstName);
	Logger.error("lastName mapped to lastName value is  "+billingAddress.lastName);
	Logger.error("street1 mapped to address1 value is  "+billingAddress.address1);
	Logger.error("street2 mapped to address2 value is  "+billingAddress.address2);
	Logger.error("street3 mapped to streetName value is  "+billingAddress.custom.streetName);
	Logger.error("street4 mapped to residence value is  "+billingAddress.custom.residence);
	Logger.error("country mapped to countryCode, value is  "+billingAddress.countryCode);
	Logger.error("city Name mapped to city value is  "+billingAddress.city);
	Logger.error("postalCode mapped to postalCode, value is  "+billingAddress.postalCode);
	Logger.error("County mapped to PO-Box/PlaceName value is  "+billingAddress.postBox);
	Logger.error("email mapped to customerEmail, value is  "+basket.customerEmail);
	Logger.error("phoneNumber mapped to phone, value is  "+billingAddress.phone);
	*/
    return PIPELET_NEXT;
}
