/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
     @input CreditCardForm : dw.web.FormElement The form containing the credit card data
*    @input Basket : dw.order.Basket  Alternative to readnig from the Form the data can be gather from the basket.  The CvNumber needs to be set then! 
*    @input CvNumber : String          This field needs to be filled only when reading from basket
*    @input ReadFromBasket : Boolean   Flag indicating wether to read from Basket or from the Forms object
*    @output CybersourceCard : Object
*/
importPackage( dw.system );
importPackage( dw.order);
importClass( dw.util.List );
importClass( dw.order.PaymentInstrument );

importScript('cybersource/Cybersource_Card_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	var cardObject : Card_Object = new Card_Object();
	var cardType : String = "";
	if ( pdict.ReadFromBasket )
	{
		var basket : Basket = pdict.Basket;
		var l : List = basket.getPaymentInstruments( dw.order.PaymentInstrument.METHOD_CREDIT_CARD );
		if( !empty(basket) && !empty(l) && l.length>0 ) {
			if ( l.length != 1 )
			{
				throw "Expected exactly one credit card.  Foun " + l.length + " cards!?";
			}
			var paymentInst : PaymentInstrument = l[0];
			cardObject.setAccountNumber  ( paymentInst.getCreditCardNumber() );
			cardObject.setFullName       ( paymentInst.getCreditCardHolder() );
			cardObject.setExpirationMonth( paymentInst.getCreditCardExpirationMonth() );
			cardObject.setExpirationYear ( paymentInst.getCreditCardExpirationYear() );
			cardObject.setStartMonth(paymentInst.getCreditCardValidFromMonth());
			cardObject.setStartYear(paymentInst.getCreditCardValidFromYear());
			cardObject.setCvNumber       ( pdict.CvNumber );
			
			cardType = paymentInst.getCreditCardType();

		}
	}
	else
	{
		var creditCardForm : dw.web.FormElement = pdict.CurrentForms.billing.paymentMethods.creditCard;

		cardObject.setAccountNumber  ( creditCardForm.number.value );
		cardObject.setFullName       ( creditCardForm.owner.value );
		cardObject.setExpirationMonth( creditCardForm.month.value );
		cardObject.setExpirationYear ( creditCardForm.year.value );
		cardObject.setStartMonth(creditCardForm.month.value);
		cardObject.setStartYear(creditCardForm.year.value);
		cardObject.setCvNumber       ( creditCardForm.cvn.value );
		
		
		cardType = creditCardForm.type.value;
	}
	
	//820813:- Implementation for the code which we send to CS against each card type.
	var cardList : dw.util.List = dw.order.PaymentMgr.getPaymentMethod(dw.order.PaymentInstrument.METHOD_CREDIT_CARD).activePaymentCards;
	var cardIterator : dw.util.Iterator = cardList.iterator();
	while(cardIterator.hasNext())
	{
		var cardObj : dw.order.PaymentMethod = cardIterator.next();
		if(cardType.equalsIgnoreCase(cardObj.cardType))
		{
			cardType = cardObj.custom.CyberSourceCodeForCardType.value;
			break;
		}
	}	
	
	/*
	Praveen:- Below is the legacy code which we got from CS, contains switch case. Now this conversion of code is taking care in the above code.
	switch( cardType )
	{
		case "Visa": 
			cardType="001";
			break;
		case "Master": 
			cardType="002";
			break;
		case "Amex": 
			cardType="003";
			break;
		case "Discover": 
			cardType="004";
			break;
		case "JCB": 
			cardType="007";
			break;
		case "Carte": 
			cardType="036";
			break;	
		
		// Diners Club--5
		// JCB--6
		// Maestro (UK Domestic) and Solo--7 
	}*/

	cardObject.setCardType(cardType);
	pdict.CybersourceCard = cardObject;
	
    return PIPELET_NEXT;
}
