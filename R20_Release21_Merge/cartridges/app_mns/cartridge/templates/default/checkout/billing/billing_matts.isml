<isdecorate template="checkout/pt_checkout"/>
<isinclude template="util/modules"/>

<iscomment>
	This template visualizes the billing step of both checkout scenarios.
	It provides selecting a payment method, entering gift certificates and
	specifying a separate billing address.
	Depending on the checkout scenario (single or multi shipping) it is
	either the second or third checkout step.
</iscomment>

<iscomment>Report this checkout step</iscomment>
<isset name="checkoutstep" value="${4}" scope="page"/>
<isset name="checkoutname" value="${'Billing'}" scope="page"/>
<isinclude template="util/reporting/ReportCheckout.isml"/>

<div class="checkout">
    <iscomment>checkout progress indicator</iscomment>
    <iscomment><!-- TODO: MattS - Steptracker needs to be removed  --></iscomment>
   
    <iscomment>    
	    <isif condition="${!pdict.CurrentForms.multishipping.entered.value}">
	    	<ischeckoutprogressindicator step="2" multishipping="false" rendershipping="${pdict.Basket.productLineItems.size() == 0 ? 'false' : 'true'}"/>
		<iselse/>
			<ischeckoutprogressindicator step="3" multishipping="true" rendershipping="${pdict.Basket.productLineItems.size() == 0 ? 'false' : 'true'}"/>
		</isif>
	</iscomment>
	<iscomment><!-- asha | TODO:  MattS Please check the position of this include is okay --></iscomment>
	<iscomment><!-- payment method area --></iscomment>
	<div id="paymentmethodform" class="paymentmethodform">
		<isinclude template="checkout/billing/paymentmethods"/>
	</div>
	<div class="checkoutbilling">
	<iscomment>billing address area</iscomment>
	<form action="${URLUtils.continueURL()}" method="post" id="${pdict.CurrentForms.billing.htmlName}">
		<fieldset>
		<iscomment>hidden input with action to trigger for the address form</iscomment>
		<input type="hidden" name="${pdict.CurrentForms.billing.save.htmlName}" value="true" />
		<div id="addressform" class="addressform">
			<iscomment><!-- TODO: MattS - Please check width of grey header block - it's slightly narrower than the one above. Added extra style to header <h5>${Resource.msg('billing.addressheader','checkout',null)}</h5> --></iscomment>
			<h5 class="grey_block_header"><span><div class="content_grey_header">${Resource.msg('billing.addressheader','checkout',null)}</div></span></h5>
			

			<iscomment>display select box with stored addresses if customer is authenticated and there are saved addresses</iscomment>
			<isif condition="${pdict.CurrentCustomer.authenticated && pdict.CurrentCustomer.profile.addressBook.addresses.size() > 0}">
				<div class="under_shadow"></div>
				<div class="addresslist">
					<div class="selectaddress">
						<span class="selectaddressstar"></span>
						<span class="selectaddressmessage"></span>
						<div class="clear"><!-- FLOAT CLEAR --></div>
					</div><!-- END: selectaddress -->
					
					
					<select name="${pdict.CurrentForms.billing.addressList.htmlName}">
						<option value="${Resource.msg('global.selectaddress','locale',null)}" selected="selected">${Resource.msg('global.selectaddress','locale',null)}</option>

						<isif condition="${pdict.CurrentCustomer.profile.addressBook.addresses.size() == 0}">
							<option value="">There are currently no Saved Addresses</option>
						<iselse>
							<isloop items="${pdict.CurrentCustomer.profile.addressBook.addresses}" var="address">
								<option value="${address.ID}">(<isprint value="${address.ID}"/>) <isprint value="${address.address1}"/>, <isprint value="${address.city}"/>, <isprint value="${address.stateCode}"/>, <isprint value="${address.postalCode}"/></option>
							</isloop>
						</isif>
					</select>
				</div>
			</isif>
			<div class="under_shadow"></div>
			<div class="formfield required requiredmessagewrapper">
				<div class="label">
					<span class="requiredmessage">${Resource.msg('global.requiredfield','locale',null)}</span>
					<span class="requiredindicator">*</span>
				</div>
				<div class="value"><!-- Empty Value Container --></div>
				<div class="clear"><!-- FLOAT CLEAR --></div>
			</div><!-- END: requiredcaption -->
			<div class="label">
				<span class="labeltext">${Resource.msg('profile.title','forms',null)}</span> 
				<span class="requiredindicator">*</span>
			</div>
			<div class="formfield title radio">
                <span>
                	<input type="radio" value="${Resource.msg('title.Mme','forms',null)}" checked name="${pdict.CurrentForms.billing.billingAddress.addressFields.title.htmlName}">${Resource.msg('title.Mme','forms',null)}
               	</span>
               	<span>
               		<input type="radio" value="${Resource.msg('title.Mlle','forms',null)}" <isif condition="${pdict.CurrentForms.billing.billingAddress.addressFields.title.value==Resource.msg('title.Mlle','forms',null)}">checked</isif> name="${pdict.CurrentForms.billing.billingAddress.addressFields.title.htmlName}">${Resource.msg('title.Mlle','forms',null)} 
          		</span>
          		<span>
               		<input type="radio" value="${Resource.msg('title.M','forms',null)}" <isif condition="${pdict.CurrentForms.billing.billingAddress.addressFields.title.value==Resource.msg('title.M','forms',null)}">checked</isif> name="${pdict.CurrentForms.billing.billingAddress.addressFields.title.htmlName}">${Resource.msg('title.M','forms',null)}
          		</span>
            </div>
           	 <div class="formfield firstname">
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.firstName}" type="input" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.firstName}" type="input" label="false"/>
			    <div class="clear"><!-- FLOAT CLEAR --></div>
	    	 </div><!-- END: firstname -->
	    	 <div class="formfield lastname">
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.lastName}" type="input" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.lastName}" type="input" label="false"/>
				<div class="clear"><!-- FLOAT CLEAR --></div>
    		</div><!-- END: lastname -->
    		<div class="formfield address1">
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.address1}" type="input" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.address1}" type="input" label="false"/>
		  		<div class="clear"><!-- FLOAT CLEAR --></div>			
    		</div><!-- END: address1 -->
    		 <div class="formfield streetname">
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.streetName}" type="input" value="false"/>
	    		<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.streetName}" type="input" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>			
		    </div>
			<div class="formfield address2">
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.address2}" type="input" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.address2}" type="input" label="false"/>
				<div class="clear"><!-- FLOAT CLEAR --></div>
    		</div><!-- END: address2 -->
    		<div class="formfield residence">
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.residence}" type="input" value="false"/>
	    		<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.residence}" type="input" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>			
		    </div>
		    <div class="formfield postbox">
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.postBox}" type="input" value="false"/>
	    		<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.postBox}" type="input" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>			
		    </div>
    		<iscomment>
				<div class="formfield country">
			    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.country}" type="input" value="false"/>
			    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.country}" type="input" label="false"/>
					<div class="clear"><!-- FLOAT CLEAR --></div>
			    </div><!-- END: country -->
			</iscomment>
			
		    <iscomment>
				<div class="formfield state">
			    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.states.state}" type="select" value="false"/>
			    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.states.state}" type="select" label="false"/>
					<div class="clear"><!-- FLOAT CLEAR --></div>
	    		</div><!-- END: state -->
	    	</iscomment>
	    	<div class="formfield zip">	
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.zip}" type="input" value="false"/>
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.zip}" type="input" label="false"/>
				<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: zip -->
			<div class="formfield city">	
				<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.city}" type="input" value="false"/>
				<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.city}" type="input" label="false"/>
				<div class="clear"><!-- FLOAT CLEAR --></div>
		    </div><!-- END: city -->
			
		    <iscomment>
				<div class="formfield phone">	
			    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.phone}" type="input" value="false"/>
			    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.phone}" type="input" label="false"/>
					<div class="clear"><!-- FLOAT CLEAR --></div>			
			    </div><!-- END: phone -->
			</iscomment>
			<div class="formfield country">
				<label for="${pdict.CurrentForms.billing.billingAddress.addressFields.country}" style="display: none;"></label>
				<div class="label">
					<span class="labeltext">${Resource.msg('forms.country','forms',null)}</span>
					<span class="requiredindicator">*</span>
				</div>
				<div class="value">
					<input type="text" maxlength="35" value="${Resource.msg('country.francemetro','forms',null)}" disabled="disabled" name="${pdict.CurrentForms.billing.billingAddress.addressFields.country}" id="${pdict.CurrentForms.billing.billingAddress.addressFields.country}" class="textinput disabled_textfield" />
				</div>
		    	
		    	<div class="clear"><!-- FLOAT CLEAR --></div>
		    	
			</div><!-- END: country -->
			<h5 class="grey_block_header"><span><div class="content_grey_header">${Resource.msg('billing.contactdetails','checkout',null)}</div></span></h5>
			<div class="under_shadow"></div>
			
			
			<div class="formfield email">	
		    	
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.email.emailAddress}" type="input" value="false" xhtmlclass="emailnum"/>
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.email.emailAddress}" type="input" label="false" xhtmlclass="emailnum"/>
			<div class="clear"><!-- FLOAT CLEAR --></div>			
		    </div><!-- END: email -->
			
			<div class="formfield confirmEmail">	
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.email.confirmEmailAddress}" type="input" value="false" xhtmlclass="confirmemailnum"/>
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.email.confirmEmailAddress}" type="input" label="false" xhtmlclass="confirmemailnum"/>
				<div class="clear"><!-- FLOAT CLEAR --></div>
			</div>
			
			
			<iscomment>
				<div class="formfield confirmEmail">
				<div class="label">
					<span class="labeltext">${Resource.msg('billing.confirmemial','checkout',null)}:</span>
					<span class="requiredindicator">*</span>
				</div>
				<div class="value">
					
					<input type="text" name="confirmEmail" id="confirmEmail" class="confirmemailnum textinput"/>
				</div>
				<div class="clear"><!-- FLOAT CLEAR --></div>
				</div>
			</iscomment>
			
			
			<div class="formfield phone">
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.phone}" type="input" value="false"/>
	    		<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.phone}" type="input" label="false"/>
		    	<div class="clear"><!-- FLOAT CLEAR --></div>			
		    </div><!-- END: phone -->
		    <div class="formfield altphone">
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.alternateContactNumber}" type="input" value="false" xhtmlclass="altphone"/>
	    		<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addressFields.alternateContactNumber}" type="input" label="false" xhtmlclass="altphone" />
		    	<div class="clear"><!-- FLOAT CLEAR --></div>			
		    </div>
			
			<iscomment>provide option to add address to address book if customer is authenticated</iscomment>
		    <isif condition="${pdict.CurrentCustomer.authenticated}">
		    	<iscomment>Commenting the code for eliminating the checkbox and setting the 'addToAddressBook' to true
				    <div class="formfield addressoptions">
				    	<div class="label">&nbsp;</div><!-- END: label -->
				    	<div class="value">
				    		<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addToAddressBook}" type="checkbox"/>
				    	</div><!-- END: value -->
			    		<div class="clear"><!-- FLOAT CLEAR --></div>
			    	</div><!-- END: addressoptions -->
		    	</iscomment>
		    	<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addToAddressBook}" type="hidden" value="${true}"/>
		    </isif>
			<div class="formfield emailsignup">
		    	<div class="label">&nbsp;</div><!-- END: label -->
		    	<div class="value checkbox">
		    		<isinputfield formfield="${pdict.CurrentForms.billing.billingAddress.addToEmailList}" type="checkbox" label="false" xhtmlclass="floatleft" />		    		
		    		<div class="chkContent">
						${Resource.msg('global.email.policy1','locale',null)} <br/>
						${Resource.msg('global.email.policy2','locale',null)}
						<a title="${Resource.msg('global.privacypolicy','locale',null)}" id="privacyPolicy">${Resource.msg('global.privacypolicy','locale',null)}</a>
					</div>		    		
		    		<iscomment><a id="privacy" title="${Resource.msg('global.privacypolicy','locale',null)}" href="#">${Resource.msg('global.privacypolicy','locale',null)}</a></iscomment>
				</div><!-- END: value -->
	    		<div class="clear"><!-- FLOAT CLEAR --></div>
		    	<!-- **** START: CR023 | Naveen Kumar ***** -->
		    	<div class="tnc-header">${Resource.msg('global.termsandconditions.read','locale',null)}</div>
		    	<div class="under_shadow"></div>		    	
		    	<!-- **** General Terms and Condition ***** -->
		    	<div class="terms_conditions">
		    		<div class="label">${Resource.msg('global.tnc.general.title','locale',null)} 
		    			<span class="requiredindicator">*</span>
		    		</div><!-- END: label -->
			    	<div class="value checkbox">
			    		<input type="checkbox" class="tncerror floatleft" name="terms_condition_checkbox_general" id="terms_condition_checkbox_general" value="${Resource.msg('global.termsandconditions','locale',null)}"></input>
			    		<div class="chkContent">
			    			${Resource.msg('global.tnc.general','locale',null)}
			    			<a id="toDO" title="${Resource.msg('global.privacypolicy','locale',null)}" href="#">${Resource.msg('global.tnc.general.link','locale',null)}</a>
			    			${Resource.msg('global.tnc.agree','locale',null)}
			    		</div>
			    		<div class="clear"></div>
					</div><!-- END: value -->
	    			<div class="clear"><!-- FLOAT CLEAR --></div>
	    		</div>
		    	<!-- **** Delivery Terms and Condition ***** -->
		    	<div class="terms_conditions">
		    		<div class="label">${Resource.msg('global.tnc.delivery.title','locale',null)} 
		    			<span class="requiredindicator">*</span>
		    		</div><!-- END: label -->
			    	<div class="value checkbox">
			    		<input type="checkbox" class="tncerror floatleft" name="terms_condition_checkbox_delivery" id="terms_condition_checkbox_delivery" value="${Resource.msg('global.termsandconditions','locale',null)}"></input>
			    		<div class="chkContent">
			    			${Resource.msg('global.tnc.delivery','locale',null)}
			    			<a id="toDO" title="${Resource.msg('global.privacypolicy','locale',null)}" href="#">${Resource.msg('global.tnc.delivery.link','locale',null)}</a>
			    			${Resource.msg('global.tnc.agree','locale',null)}
			    		</div>
			    		<div class="clear"></div>
					</div><!-- END: value -->
	    			<div class="clear"><!-- FLOAT CLEAR --></div>
	    			<!-- **** END: CR023 | Naveen Kumar ***** -->	    			
	    		</div>
	    	</div><!-- END: emailsignup -->
	    </div><!-- END: addressform -->
	    <input type="hidden" name="${pdict.CurrentForms.billing.secureKeyHtmlName}" value="${pdict.CurrentForms.billing.secureKeyValue}"/>
		</fieldset>
	</form>

	<isset name="gcApplicable" value="${'false'}" scope="page"/>
	<isif condition="${dw.order.PaymentMgr.getPaymentMethod(dw.order.PaymentInstrument.METHOD_GIFT_CERTIFICATE).isActive()}">
		<isset name="gcApplicable" value="${'true'}" scope="page"/>
	</isif>

	<iscomment>coupon code / gift certificate area</iscomment>
<iscomment>
	<div id="couponsform" class="giftcertcouponform">

		<isif condition="${pdict.Basket.giftCertificateLineItems.size() == 0 && gcApplicable == 'true'}">
			<h5>${Resource.msg('billing.giftcouponheader','checkout',null)}</h5>
		<iselse/>
			<h5>${Resource.msg('billing.couponheader','checkout',null)}</h5>
		</isif>
		
		<div id="couponentry" class="couponform">
			<isif condition="${gcApplicable == 'true'}">
				<div class="helptext"><iscontentasset aid="checkout-giftcertcoupon-help"/></div>
			<iselse>
				<div class="helptext"><iscontentasset aid="checkout-coupon-help"/></div>	
			</isif>
			<form action="${URLUtils.continueURL()}" method="post" id="${pdict.CurrentForms.billingcoupon.htmlName}" class="suppress">
				<div class="formfield couponcode">
					<isinputfield formfield="${pdict.CurrentForms.billingcoupon.couponCode}" type="input" value="false"/>
					<isinputfield formfield="${pdict.CurrentForms.billingcoupon.couponCode}" type="input" label="false"/>
				    <button type="submit" name="${pdict.CurrentForms.billingcoupon.applyCoupon.htmlName}" value="${Resource.msg('global.apply','locale',null)}"><span>${Resource.msg('global.apply','locale',null)}</span></button>
					<div class="clear"><!-- FLOAT CLEAR --></div>
				</div><!-- END: couponcode -->
				<div class="redemption"><!-- container for coupon applied success messages --></div>
			</form>
		</div><!-- END: couponsform -->


		<isset name="gcPITotal" value="${0}" scope="page"/>
		<isif condition="${gcApplicable == 'true'}">

		
		<isif condition="${pdict.Basket.giftCertificateLineItems.size() == 0}">
			<div id="giftcertentry" class="giftcertform">
				<div class="helptext"><iscontentasset aid="checkout-giftcert-help"/></div>
				<form action="${URLUtils.continueURL()}" method="post" id="${pdict.CurrentForms.billinggiftcert.htmlName}" class="suppress">
					<div class="formfield giftcertfield">
						<isinputfield formfield="${pdict.CurrentForms.billinggiftcert.giftCertCode}" type="input" value="false"/>
						<isinputfield formfield="${pdict.CurrentForms.billinggiftcert.giftCertCode}" type="input" label="false"/>
					    <button type="submit" name="${pdict.CurrentForms.billinggiftcert.redeemGiftCert.htmlName}" value="${Resource.msg('global.apply','locale',null)}"><span>${Resource.msg('global.apply','locale',null)}</span></button>
					    <span class="checkbalance"><a href="${'#'}">${Resource.msg('global.checkbalance','locale',null)}</a></span>
					    <div class="redemption">
				    		
				    		<isset name="gcPITotal" value="${0}" scope="page"/>
				    		<isif condition="${pdict.Basket.giftCertificatePaymentInstruments.size() > 0}">
				    			<isloop items="${pdict.Basket.giftCertificatePaymentInstruments}" var="giftCertPI">
				    				<isset name="gcPITotal" value="${gcPITotal + giftCertPI.paymentTransaction.amount}" scope="page"/>
				    				<div class="success giftcertpi" id="gc-${giftCertPI.giftCertificateID}"><isprint value="${giftCertPI.paymentTransaction.amount}"/> ${Resource.msg('billing.giftcertredeemed','checkout',null)} <a id="rgc-${giftCertPI.giftCertificateID}" class="remove" href="${'#'}"><img src="${URLUtils.staticURL('/images/icon_remove.gif')}" alt="${Resource.msg('global.remove','locale',null)}"/><span>${Resource.msg('global.remove','locale',null)}</span></a></div>
				    			</isloop>
				    		</isif>
				    	</div>
						<div class="balance"><!-- contains the balance information on a successful balance check --></div>
						<div class="clear"><!-- FLOAT CLEAR --></div>
					</div><!-- END: giftcertfield -->
				</form>
			</div><!-- END: giftcertform -->
		</isif>
		
		</isif>
		
	</div><!-- END: giftcertcouponform -->
</iscomment>
<isset name="gcPITotal" value="${0}" scope="page"/>
	<iscomment>payment method area
		<div id="paymentmethodform" class="paymentmethodform">
			<isinclude template="checkout/billing/paymentmethods"/>
		</div>
	</iscomment>
	
	<div class="formactions">
		<div class="floatright btn-green-flat">
					<button type="submit" id="billingShoppingButton" name="${pdict.CurrentForms.billing.save.htmlName}" value="${Resource.msg('billing.submitorder','checkout',null)}"><span class="btn-ic-lock">${Resource.msg('billing.submitorder','checkout',null)}</span><span class="forward-icon">&nbsp;</span></button>
		</div><!--  END : floatright -->

		<div class="floatleft btn-grey-flat">
					<div class="link_button">
						<a href="${URLUtils.url('COShipping-Start')}" class="back-icon"><span>${Resource.msg('singleshipping.back','checkout',null)}</span></a>
					</div>
			<div class="clear"><!-- FLOAT CLEAR --></div>
		</div>
	</div><!-- END: formactions -->
	<div class="clear"><!-- FLOAT CLEAR --></div>
	</div><!-- END: checkoutbilling -->
	
	
</div><!-- END: checkout -->

<script type="text/javascript"><!--
jQuery(document).ready(function() {
	
/*	
	
	jQuery("#billingShoppingButton").click(function() {
	
		var expiryDate = document.getElementById('${pdict.CurrentForms.billing.paymentMethods.creditCard.year.htmlName}').value;
		var startDate = document.getElementById('${pdict.CurrentForms.billing.paymentMethods.creditCard.ccValidFromYear.htmlName}').value;
		
		expiryDate = expiryDate.replace(",", ""); 
		expiryDate = parseInt(expiryDate);
		if(expiryDate < 2000)
		{ 
			expiryDate = expiryDate + 2000;
			document.getElementById('${pdict.CurrentForms.billing.paymentMethods.creditCard.year.htmlName}').value = expiryDate;
		}
		
		if(startDate != null && startDate != "")
		{
			startDate = startDate.replace(",", ""); 
			startDate = parseInt(startDate);
			if(startDate < 2000)
			{ 
				startDate = startDate + 2000;
				document.getElementById('${pdict.CurrentForms.billing.paymentMethods.creditCard.ccValidFromYear.htmlName}').value = startDate;
			}
		}
		return false;
	});

*/	
/*
	jQuery("#terms_condition_checkbox").click(function() {
		
		var termsChecked = document.getElementById('terms_condition_checkbox').checked;
		
		if(termsChecked)
		{
			//document.getElementById('billingShoppingButton').disabled = false;
			$('#billingShoppingButton').attr('disabled', false);
			$('#billingShoppingButton').removeClass("disabled");
		}
		else
		{
			//document.getElementById('billingShoppingButton').disabled = true;
			//$('#billingShoppingButton :button').attr('disabled', true);
			$('#billingShoppingButton').attr('disabled', true);
			$('#billingShoppingButton').addClass("disabled");
		}
		});
*/
	/*
	jQuery("#billingShoppingButton").click(function() {
		
		var termsChecked = document.getElementById('privacySettingsID').checked;
		alert("radhe"+termsChecked);
		if(termsChecked)
		{
			alert("inside if"+termsChecked);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addToEmailList}]").val(true);
			//document.getElementById("dwfrm_billing_billingAddress_addToEmailList").attr("checked", "checked");
		}
		else
		{
			alert("inside else"+termsChecked);
			//document.getElementById('billingShoppingButton').disabled = true;
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addToEmailList}]").val(false);
		}
		});*/
});







function applyCouponCode(couponCode) {
	setCouponError(null);
	// nothing entered
	if(!couponCode) {
		setCouponError("${Resource.msg('billing.couponinvalid','checkout',null)}");
		return;
	}
	// attempt to apply
	var url = app.util.appendParamToURL("${URLUtils.https('COBilling-ApplyCoupon')}","couponCode", couponCode);
	var result = app.ajax.getJson({
		url: url,
		callback: function(data) {
			updateSummary();
			if(!data) {
				setCouponError("${Resource.msg('billing.couponinvalid','checkout',null)}");
				return false;
			}
			if(data.redemptionErrorMsg) {
				setCouponError(data.redemptionErrorMsg);
				return false;
			}
			if(!data.redemption)
			{
				setCouponError("${Resource.msg('billing.couponinvalid','checkout',null)}");
				return false;
			}
			// empty input field and display redemption in UI
			jQuery("input[name=${pdict.CurrentForms.billingcoupon.couponCode.htmlName}]").val("");
			setCouponRedemptionInfo(data.redemption);
			// update gift card redemptions as amounts might have changed after coupon
			jQuery.each(data.redemption.gcRedemptions, function(){
				setGiftCertRedemptionInfo(this.giftCertificateID, this.amount);
			});
			var countryCode = jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.country.htmlName}]").val();
			updatePaymentMethods( countryCode );
		}
	});
}

function redeemGiftCert(giftCertificateId) {
	setGiftCertError(null);
	setGiftCertBalanceInfo(null);
	// nothing entered
	if(!giftCertificateId) {
		setGiftCertError("${Resource.msg('billing.giftcertinvalid','checkout',null)}");
		return;
	}
	// attempt to redeem
	var url = app.util.appendParamToURL("${URLUtils.https('COBilling-RedeemGiftCertificate')}", "giftCertificateID", giftCertificateId);
	var result = app.ajax.getJson({
		url: url,
		callback: function(data) {
			if(!data) {
				setGiftCertError("${Resource.msg('billing.giftcertinvalid','checkout',null)}");
				return false;
			}
			if(data.redemptionErrorMsg) {
				setGiftCertError(data.redemptionErrorMsg);
				return false;
			}
			if(!data.redemption)
			{
				setGiftCertError("${Resource.msg('billing.giftcertinvalid','checkout',null)}");
				return false;
			}
			// empty input field and display redemption in UI
			jQuery("input[name=${pdict.CurrentForms.billinggiftcert.giftCertCode.htmlName}]").val("");
			setGiftCertRedemptionInfo(data.redemption.giftCertificateID, data.redemption.amount);

			if(data.redemption.orderBalance <= 0)
			{
				setPaymentSection(data.redemption.orderBalance);
			}
			else
			{
				var countryCode = jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.country.htmlName}]").val();
				updatePaymentMethods( countryCode );
			}
			
			updateSummary();
		}
	});
}

function checkGiftCertBalance(giftCertificateId) {
	setGiftCertError(null);
	setGiftCertBalanceInfo(null);
	// nothing entered
	if(!giftCertificateId) {
		setGiftCertError("${Resource.msg('billing.giftcertidmissing','checkout',null)}");
		return;
	}
	// load gift certificate details
	var url = app.util.appendParamToURL("${URLUtils.https('COBilling-GetGiftCertificateBalance')}", "giftCertificateID", giftCertificateId);
	var result = app.ajax.getJson({
		url: url,
		callback: function(data) {
			if(!data || !data.giftCertificate) {
				setGiftCertError("${Resource.msg('billing.giftcertinvalid','checkout',null)}");
				return false;
			}
			// display details in UI
			setGiftCertBalanceInfo(data.giftCertificate.balance);
		}
	});
}

function removeGiftCertificate(giftCertificateId) {
	jQuery(".balance").empty();
	// remove gift certificate
	var url = app.util.appendParamToURL("${URLUtils.https('COBilling-RemoveGiftCertificate')}", "giftCertificateID", giftCertificateId);
	var result = app.ajax.getJson({
		url: url,
		callback: function(data) {
			if(!data || !data.giftCertificate || !data.giftCertificate.removed) {
				setGiftCertError("${Resource.msg('billing.giftcerterror','checkout',null)}");
				return false;
			}
			// remove message in UI
			jQuery("${'#'}gc-"+giftCertificateId).remove();
			// reinstate payment methods section which might have been hidden if the whole order was paid with gift certs
			jQuery("${'#'}paymentmethods").show();
			// hide gift cert used for otder total message
			jQuery(".giftcertused").hide();

			var countryCode = jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.country.htmlName}]").val();
			updatePaymentMethods( countryCode );

			updateSummary();
		}
	});
}

function setCouponError(msg) {
	if(!msg) {
		jQuery("${'#'}couponentry span.errormessage").remove();
		return;
	}
	jQuery("input[name=${pdict.CurrentForms.billingcoupon.couponCode.htmlName}]").parent().append("<span class=\"errormessage\">" + msg + "<\/span>");
}

function setGiftCertError(msg) {
	if(!msg) {
		jQuery("${'#'}giftcertentry span.errormessage").remove();
		return;
	}
	jQuery("input[name=${pdict.CurrentForms.billinggiftcert.giftCertCode.htmlName}]").parent().append("<span class=\"errormessage\">" + msg + "<\/span>");
}

function setGiftCertBalanceInfo(amountExpr) {
	if(!amountExpr) {
		jQuery(".balance").empty();
		return;
	}
	jQuery(".balance").text("${Resource.msg('billing.giftcertbalance','checkout',null)}" + amountExpr);
}

function setCouponRedemptionInfo(redemption) {
	if(!redemption) return;
	var redeemMsg = "${Resource.msg('billing.couponnotapplied','checkout',null)}";
	if(redemption.applied) redeemMsg = "${Resource.msg('billing.couponapplied','checkout',null)}";
	jQuery("${'#'}couponentry .redemption").append("<div class=\"success\">${Resource.msg('billing.couponlabel','checkout',null)} <span class=\"submitedcoupon\">" + redemption.couponCode + "</span> " + redeemMsg + "<\/div>");
}

function setGiftCertRedemptionInfo(giftCertificateId, amountExpr) {
	if(!giftCertificateId || !giftCertificateId) {
		return;
	}
	jQuery("${'#'}gc-"+giftCertificateId).remove();
	jQuery("${'#'}giftcertentry .redemption").append("<div class=\"success giftcertpi\" id=\"gc-" + giftCertificateId + "\">" + amountExpr + " ${Resource.msg('billing.giftcertredeemed','checkout',null)} <a id=\"rgc-" + giftCertificateId + "\" class=\"remove\" href=\"${'#'}\"><img src=\"${URLUtils.staticURL('/images/icon_remove.gif')}\" alt=\"${Resource.msg('global.remove','locale',null)}\"\/><span>${Resource.msg('global.remove','locale',null)}<\/span><\/a><\/div>");
	bindGiftCertificateRemoval();
}
// if the whole order total was paid with gift certs then hide other payment methods and show a message
function setPaymentSection(orderBalance) {
	
	if(!orderBalance) {
		return;
	}
	
	if (orderBalance <= 0) {
		// if the whole order total was paid with gift certs then hide other payment methods and show a message
		jQuery("${'#'}paymentmethods").hide();
		// if the order total is zero, determine was it because of the gift certificate use or a promotion? and show appropriate message		
		jQuery(".giftcertused").html(jQuery(".giftcertpi").length > 0 ? "${Resource.msg('billing.giftcertnomethod','checkout',null)}" : "${Resource.msg('billing.zerobalance','checkout',null)}").show();
	}
}

function bindGiftCertificateRemoval() {
	jQuery("${'#'}giftcertentry a.remove").unbind("click").bind("click", function() {
		var gcId = app.util.trimPrefix(jQuery(this).attr("id"), "rgc-");
		removeGiftCertificate(gcId);
		return false;
	});
}

// updates the address form with the attributes of a given address
function populateAddressForm(addressID)
{
	// load address details
	var url = app.util.appendParamToURL("${URLUtils.https('Address-GetAddressDetails')}", "addressID", addressID);
	var result = app.ajax.getJson({
		url: url,
		callback: function(data) {
			if(!data || !data.address) {
				alert("${Resource.msg('checkout.addressloaderror','checkout',null)}");
				return false;
			}
			// fill the form
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.firstName.htmlName}]").val(data.address.firstName);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.lastName.htmlName}]").val(data.address.lastName);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.address1.htmlName}]").val(data.address.address1);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.address2.htmlName}]").val(data.address.address2);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.city.htmlName}]").val(data.address.city);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.zip.htmlName}]").val(data.address.postalCode);
			changeFormSelection(jQuery("select[name=${pdict.CurrentForms.billing.billingAddress.addressFields.states.state.htmlName}]")[0], data.address.stateCode);
			changeFormSelection(jQuery("select[name=${pdict.CurrentForms.billing.billingAddress.addressFields.country.htmlName}]")[0], data.address.countryCode);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.phone.htmlName}]").val(data.address.phone);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.alternateContactNumber.htmlName}]").val(data.address.alternateContactNumber);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.streetName.htmlName}]").val(data.address.streetName);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.residence.htmlName}]").val(data.address.residence);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.postBox.htmlName}]").val(data.address.postBox);
			jQuery("input[name=${pdict.CurrentForms.billing.billingAddress.addressFields.title.htmlName}]").filter("[value="+data.address.title+"]").attr("checked","checked");
			
			// remove error messaging
			jQuery("#addressform span.errormessage").remove();
			jQuery("#addressform input.errormessage").removeClass("errormessage");
			jQuery("#addressform .errorlabel").removeClass("errorlabel");
			/*
			 *Praveen:- Commenting out the following 'updatePaymentMethods(countryCode)' method call, so that if a loggedin user selects a address
			 *			 from drop down then payment details will not be refreshed. 
			 *			
			*/
			//updatePaymentMethods( data.address.countryCode );
		}
	});
}

// updates the credit card form with the attributes of a given card
function populateCreditCardForm(cardID)
{
	// load card details
	var url = app.util.appendParamToURL("${URLUtils.https('COBilling-SelectCreditCard')}", "creditCardUUID", cardID);
	var result = app.ajax.getJson({
		url: url,
		callback: function(data) {
			if(!data || !data.creditCard) {
				alert("${Resource.msg('billing.creditcardloaderror','checkout',null)}");
				return false;
			}
						
			// fill the form / clear the former cvn input
			jQuery("input[name=${pdict.CurrentForms.billing.paymentMethods.creditCard.owner.htmlName}]").val(data.creditCard.holder);
			changeFormSelection(jQuery("select[name=${pdict.CurrentForms.billing.paymentMethods.creditCard.type.htmlName}]")[0], data.creditCard.type);
			jQuery("input[name=${pdict.CurrentForms.billing.paymentMethods.creditCard.number.htmlName}]").val(data.creditCard.maskedNumber);
			var expYearValue = "";
			if(data.creditCard.startYear.indexOf(",") > -1)
			{
				expYearValue = data.creditCard.startYear.replace(/,/g,'');
			}
			if(data.creditCard.startYear.indexOf(".") > -1)
			{
				expYearValue = data.creditCard.startYear.replace(/\./g,'');
			}
			
			//813913: calling the 'showValidFrom' method to make the start from div visible.
			showValidFrom(data.creditCard.type);
			jQuery("input[name=${pdict.CurrentForms.billing.paymentMethods.creditCard.ccValidFromMonth.htmlName}]").val(data.creditCard.startMonth);
			jQuery("input[name=${pdict.CurrentForms.billing.paymentMethods.creditCard.ccValidFromYear.htmlName}]").val(expYearValue);
			
		
			var finalYearValue = "";
			if(data.creditCard.expirationYear.indexOf(",") > -1)
			{
				finalYearValue = data.creditCard.expirationYear.replace(/,/g,'');
			}
			if(data.creditCard.expirationYear.indexOf(".") > -1)
			{
				finalYearValue = data.creditCard.expirationYear.replace(/\./g,'');
			}
			
			jQuery("input[name=${pdict.CurrentForms.billing.paymentMethods.creditCard.month.htmlName}]").val(data.creditCard.expirationMonth);
			jQuery("input[name=${pdict.CurrentForms.billing.paymentMethods.creditCard.year.htmlName}]").val(finalYearValue);
			
			//changeFormSelection(jQuery("select[name=${pdict.CurrentForms.billing.paymentMethods.creditCard.month.htmlName}]")[0], data.creditCard.expirationMonth);
			//changeFormSelection(jQuery("select[name=${pdict.CurrentForms.billing.paymentMethods.creditCard.year.htmlName}]")[0], data.creditCard.expirationYear);
			jQuery("input[name=${pdict.CurrentForms.billing.paymentMethods.creditCard.cvn.htmlName}]").val("");
			// remove error messaging
			jQuery("#PaymentMethod_CREDIT_CARD span.errormessage").remove();
			jQuery("#PaymentMethod_CREDIT_CARD input.errormessage").removeClass("errormessage");
			jQuery("#PaymentMethod_CREDIT_CARD .errorlabel").removeClass("errorlabel");
		}
	});
}

// changes the selection of the given form select to the given value
function changeFormSelection(selectElem, selectedValue)
{
	if(!selectElem) return;
	var options = selectElem.options;
	if(options.length > 0) {
		// find index of value to select
		var idx = 0;
		for(var i=0; i<options.length; i++) {
			if(options[i].value != selectedValue) continue;
			idx = i; break;
		}
		selectElem.selectedIndex = idx;
	}
}

// changes the payment method form
function changePaymentMethod(paymentMethodID)
{
	jQuery(".paymentform").hide();
	jQuery("${'#'}PaymentMethod_" + paymentMethodID).show();
	if( jQuery("${'#'}PaymentMethod_" + paymentMethodID).length == 0 )
	{
		jQuery("${'#'}PaymentMethod_Custom").show();
	}

	// ensure checkbox of payment method is checked
	jQuery("${'#'}is-" + paymentMethodID).attr("checked", true);
}

// initializes the payment method forms
function initPaymentMethodSelection() {

	// get selected payment method from payment method form
	var paymentMethodID = jQuery("input[name=${pdict.CurrentForms.billing.paymentMethods.selectedPaymentMethodID.htmlName}]:checked").val();
	if( !paymentMethodID )
	{
		// if necessary fall back to default payment method (first non-gift-certificate method)
	    paymentMethodID = getDefaultPaymentMethod();
	}

	// show payment method section
	changePaymentMethod(paymentMethodID);
}

// returns the default payment method
function getDefaultPaymentMethod() {
	<isloop items="${pdict.CurrentForms.billing.paymentMethods.selectedPaymentMethodID.options}" var="pm">
	<iscomment>Ignore GIFT_CERTIFICATE method, GCs are handled separately before other payment methods.</iscomment>
	<isif condition="${pm.value.equals(dw.order.PaymentInstrument.METHOD_GIFT_CERTIFICATE)}"><iscontinue/></isif>
		return "${pm.value}";<isbreak/>
	</isloop>
}

// updates the current address list entry with the updated address details
function updateAddressListEntry() {
	// get the current address ID and load address details
	var addressID = jQuery("select[name=${pdict.CurrentForms.billing.addressList.htmlName}]").val();
	var url = app.util.appendParamToURL("${URLUtils.https('Address-GetAddressDetails')}", "addressID", addressID);
	var result = app.ajax.getJson({
		url: url,
		callback: function(data) {
			if(!data || !data.address) {
				alert("${Resource.msg('checkout.addressloaderror','checkout',null)}");
				return false;
			}
			// update the address select entry
			var addressLine = "(" + data.address.ID + ") " + data.address.address1 + ", " + data.address.city +
				", " + data.address.stateCode + ", " + data.address.postalCode;

			// update address list entry
			var optionElem = jQuery("select[name=${pdict.CurrentForms.billing.addressList.htmlName}] > option[value=" + data.address.ID + "]");
			optionElem.html(addressLine);
		}
	});
}

// removes the current address list entry
function removeAddressListEntry() {
	// get the current address ID
	var addressID = jQuery("select[name=${pdict.CurrentForms.billing.addressList.htmlName}]").val();
	// remove the option element
	var optionElem = jQuery("select[name=${pdict.CurrentForms.billing.addressList.htmlName}] > option[value=" + addressID + "]");
	optionElem.remove();
	// reset selection to first entry
	jQuery("select[name=${pdict.CurrentForms.billing.addressList.htmlName}]")[0].selectedIndex = 0;
}

// updates the order summary based on a possibly recalculated 
// basket after a coupon code has been applied (possibly added
// bonus products and order discounts are rendered along with
// the updated basket)
function updateSummary() {
	var url = "${URLUtils.url('COBilling-UpdateSummary')}";

	// indicate progress
	jQuery("#rightcolumn").html(app.showProgress());

	// load the updated summary area
	jQuery("#rightcolumn").load( url, function() {
		jQuery("#rightcolumn").fadeIn("fast");
	});
}

//updates the state label depending on the given contry code
//if the flag updateSelection is set to true the state selection
//changes to the first possible select option based on the country
function updateStateLabel(countryCode, updateSelection) {
	var label = "${Resource.msg('forms.state','forms',null)}:";
	if(countryCode == "CA") {
		label = "${Resource.msg('forms.province','forms',null)}:";
	}
	jQuery("div.state > .label > .labeltext").html(label);

	if(updateSelection) {
		var initialOption = "##";
		if(countryCode == "US") {
			initialOption = "";
		} else if(countryCode == "CA") {
			initialOption = "AB";
		}
		changeFormSelection(jQuery("select[name=${pdict.CurrentForms.billing.billingAddress.addressFields.states.state.htmlName}]")[0], initialOption);
	}
}

jQuery(document).ready(function() {
	// select address from list
	jQuery(".addresslist select").change(function() {
		var addressID = jQuery(this).val();
		if(!addressID) return false;
		populateAddressForm(addressID);
		return false;
	});

	// update state label upon entering page
	updateStateLabel(jQuery("select[name=${pdict.CurrentForms.billing.billingAddress.addressFields.country.htmlName}]").val(), false);

	// update state label upon country selection
	jQuery("select[name=${pdict.CurrentForms.billing.billingAddress.addressFields.country.htmlName}]").change(function() {
		updateStateLabel(jQuery(this).val(), true);
	});

	// bind coupon redemption
	jQuery("${'#'+pdict.CurrentForms.billingcoupon.htmlName}").submit(function() {
		var couponCode = jQuery("input[name=${pdict.CurrentForms.billingcoupon.couponCode.htmlName}]").val();
		applyCouponCode(couponCode);
		return false;
	});
	
	// bind gift cert redemption
	jQuery("${'#'+pdict.CurrentForms.billinggiftcert.htmlName}").submit(function() {
		var gcId = jQuery("input[name=${pdict.CurrentForms.billinggiftcert.giftCertCode.htmlName}]").val();
		redeemGiftCert(gcId);
		return false;
	});

	// bind gift cert balance check
	jQuery(".checkbalance a").click(function() {
		var gcId = jQuery("input[name=${pdict.CurrentForms.billinggiftcert.giftCertCode.htmlName}]").val();
		checkGiftCertBalance(gcId);
		return false;
	});

	// bind gift cert removal
	bindGiftCertificateRemoval();

	// bind country code change handler
    bindCountryChangeHandler();
	
	// bind payment method change handler
    bindPaymentMethodChangeHandler();

	// initialize payment method selection
	initPaymentMethodSelection();

	// select credit card from list
	bindCreditCardPopulationHandler();

	// handle whole form submit (bind click to continue checkout button)
	// append form fields of current payment form to this submit
	// in order to validate the payment method form inputs too
	jQuery("button[name=${pdict.CurrentForms.billing.save.htmlName}]").click(function() {
		// determine the current payment method form
		var selectedPaymentMethodID = jQuery("input[name=${pdict.CurrentForms.billing.paymentMethods.selectedPaymentMethodID.htmlName}]:checked").val();
		
		// payment method could be absent if the total is 0 (perhaps because of promotion(s)
		// - 0 is needed otherwise the expression won't return a valid number in non-default locales e.g. in de_DE (decimal point is , which doesn't work)
		//if(!selectedPaymentMethodID && ${pdict.Basket.getTotalGrossPrice() - 0} > 0) return false;

		// reset payment insturment flag, false when order total is 0 (becuase of promotion perhaps)
		var resetPayIns = true;
		
		// get the main form
		var mainForm = jQuery("${'#' + pdict.CurrentForms.billing.htmlName}");

		// set the payment method at the main form
		mainForm.append("<input type=\"hidden\" name=\"${pdict.CurrentForms.billing.paymentMethods.selectedPaymentMethodID.htmlName}\" />");		

		// determine if the order total was paid using gift cert or a promotion
		if (jQuery(".giftcertused").css("display") == "none") {
			jQuery("${'#' + pdict.CurrentForms.billing.htmlName} input[name=${pdict.CurrentForms.billing.paymentMethods.selectedPaymentMethodID.htmlName}]").val(selectedPaymentMethodID);
			
			// append inputs of payment method form as hidden elements to main form (all inputs except checkboxes)
			jQuery("${'#'}PaymentMethod_" + selectedPaymentMethodID + " form :input").filter(":not(:checkbox)").each(function(i, elem) {
				var input = jQuery(this);
				mainForm.append("<input type=\"hidden\" name=\"" + input.attr("name") + "\" />");
				jQuery("${'#' + pdict.CurrentForms.billing.htmlName} input[name=" + input.attr("name") + "]").val(input.val());
			});
			// checkboxes are only appended if checked
			jQuery("${'#'}PaymentMethod_" + selectedPaymentMethodID + " form :checkbox:checked").each(function(i, elem) {
				var input = jQuery(this);
				mainForm.append("<input type=\"hidden\" name=\"" + input.attr("name") + "\" />");
				jQuery("${'#' + pdict.CurrentForms.billing.htmlName} input[name=" + input.attr("name") + "]").val(input.val());
			});
		}
		else {
			// determine if the order total was paid using gift cert or it was 0 because of promotion(s)
			jQuery(".giftcertpi").length > 0 ? jQuery("${'#' + pdict.CurrentForms.billing.htmlName} input[name=${pdict.CurrentForms.billing.paymentMethods.selectedPaymentMethodID.htmlName}]").val("${dw.order.PaymentInstrument.METHOD_GIFT_CERTIFICATE}") : (resetPayIns=false);
		}
		// reset the remaining payment forms (synchronous) only when a method is specified i.e. there is no payment method when order total is 0 perhaps due to promotion(s)
		if (resetPayIns) {
			app.ajax.getJson({
				url: app.util.appendParamToURL("${URLUtils.url('COBilling-ResetPaymentForms')}", "paymentMethodID", selectedPaymentMethodID),
				async: false,
				callback: function(data) {}
			});
		}


			
		// submit the main form - check to see if form is valid - if so, overlay 
		// please wait dialogue box
		
		var confirmValid = mainForm.valid();
		  
		 if(confirmValid==true){
			
			// show loading spinner
			/* 
				open a modal window - this has been used instead of the 
				app.dialog version - more room for customisation
			*/
				
					if(!$("#dialogcontainer").get(0)){
							jQuery(document.body).append("<div id=\"dialogcontainer\"></div>");
						}
						
						var options = {
								minWidth:513,
								minHeight:220,
							
								title:'Please wait',
								zIndex:90210,
								resizable:false,
								modal:true,
								dialogClass:'pleaseWaitDialog',
								closeText:'close',
								close: function(ev, ui) { $(this).remove(); },
								stack:true,
								closeOnEscape: false,
							   	open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); } /* Hides close button */
						}
						$('#dialogcontainer').dialog(options);
				
				
						jQuery.ajax({
						
							dataType: "html",
							/** TODO - this url needs to be made dynamic MattS 7.June 2011 **/
							url		: '/on/demandware.static/Sites-MatthewSSite-Site/-/default/v1306317639910/html/please-wait.html',
							cache	: true,
													
							success: function(response, textStatus) {
									jQuery('#dialogcontainer').html(response);
									mainForm.submit();									
							},
	
							error: function(request, textStatus, error) {
								if (textStatus === "parsererror") {								
									alert(app.resources["ERROR_RESPONSE"]);
								}
							}
						});						
		} else {		
			// submit form if validation errors.
			mainForm.submit();
		}
	});

	jQuery("#privacy").click(function() {
		jQuery(this).attr("target", "_blank");
	});
	// see if we need to show/hide payment methods if the order was paid with gc
	setPaymentSection("${pdict.Basket.getTotalGrossPrice() - gcPITotal}");
	
});

function bindPaymentMethodChangeHandler()
{
	// bind payment method change handler
	jQuery("input[name=${pdict.CurrentForms.billing.paymentMethods.selectedPaymentMethodID.htmlName}]").click(function() {
		var selectedID = jQuery(this).val();
		changePaymentMethod(selectedID);
	});
}

function bindCreditCardPopulationHandler()
{
	// select credit card from list
	jQuery(".creditcardlist select").change(function() {
		var cardUUID = jQuery(this).val();
		if(!cardUUID) return false;
		populateCreditCardForm(cardUUID);
		return false;
	});
}

function bindCountryChangeHandler()
{
	// bind country code change handler
	jQuery("select[name=${pdict.CurrentForms.billing.billingAddress.addressFields.country.htmlName}]").change(function() {
		updatePaymentMethods( jQuery(this).val() );
	});
}

//updates the payment method section after billing address country-code changed, coupon code was entered or
//or gift certificate was redeemed
function updatePaymentMethods(countryCode) 
{
	if (jQuery(".giftcertused").css("display") != "none") return;
		
	var url = app.util.appendParamToURL("${URLUtils.url('COBilling-RefreshPaymentMethods')}", "countryCode", countryCode);

	// indicate progress
	jQuery("#paymentmethodform").html(app.showProgress());

	// load the updated payment method area
	jQuery("#paymentmethodform").load( url, function() {
		jQuery("#paymentmethodform").fadeIn("fast");
		initPaymentMethodSelection();
	    bindPaymentMethodChangeHandler();
	    bindCreditCardPopulationHandler();
	});

	app.execUjs();
}
//--></script>

</isdecorate>
