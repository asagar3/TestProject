/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
* Implemantation of CR 3072 emailing part
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*  @output pidString : String
*  @input NoTaxClassObject : dw.object.CustomObject
*
*/
importPackage( dw.system );
importPackage( dw.object );
importPackage( dw.order );
importPackage(dw.catalog);
importPackage( dw.util );
importPackage(dw.customer);


function execute( pdict : PipelineDictionary ) : Number
{
	var pidString : String = "";
	var customNoTaxClassObject : dw.object.CustomObject =pdict.NoTaxClassObject;  
		  
//	var hashPid : dw.util.HashSet= new HashSet();
 	   try{
 /*	   		var noTaxClasses : Iterator = CustomObjectMgr.getAllCustomObjects("CustomNoTaxClassIds");
 	   		while(noTaxClasses.hasNext()){
 	   			var  customNoTaxClassObject : CustomObject=noTaxClasses.next();
 	   			hashPid=createHastPidSet(customNoTaxClassObject); 	   			
 	   		}
 	   		
 	   		if(hashPid.length>0)
 	   		{
 	   			pidString=createPidString(hashPid);
 	   		}	
 	   		
 	   		deleteCustomNoTaxClassObject("CustomNoTaxClassIds");
 	   		
 	   		//CustomObjectMgr.remove(customNoTaxClassObject);
 	   		/*	
 	   		    var eo : dw.object.CustomAttributes = customNoTaxClassObject.getCustom();
				var prodIds : String = eo.productId;				 
				var pidArray : Array=prodIds.split(",");
				var hashPid : dw.util.HashSet= new HashSet();
				for(var i=0; i<pidArray.length; i++){
					hashPid.add(pidArray[i]);
				}
			
				//	pidString = "Today there are no products with no tax class isses ";
					return PIPELET_NEXT;			
 	   		}
 	*/   		
 	   		
	//   		var  customNoTaxClassObject : CustomObject= CustomObjectMgr.getCustomObject("CustomNoTaxClassIds", NoTaxClassPIds);	
			if(customNoTaxClassObject==null){
				pidString = "Error while retrieving values from custom object ";
				return PIPELET_ERROR;
			}
			else{				
				var eo : dw.object.CustomAttributes = customNoTaxClassObject.getCustom();
				var prodIds : String = eo.productId;				 
				var pidArray : Array=prodIds.split(",");
				var hashPid : dw.util.HashSet= new HashSet();
				for(var i=0; i<pidArray.length; i++){
					hashPid.add(pidArray[i]);
				}
				 
				var pidIterator : Iterator = hashPid.iterator();
				while(pidIterator.hasNext()){
					var pid : String = pidIterator.next();
					if(pidString==""){
						pidString = "ProductIds with Invalid TaxClass : " + pid;	
					}
					else{
						pidString = pidString + ","+ pid;
					}								
				}
				CustomObjectMgr.remove(customNoTaxClassObject);				
			}
						
	   	}
	    catch(e){
	    	Logger.error("CustomNoTaxClassIds is not found in Custom Objects in Business Manager", "");
	    	pdict.pidString="Error Occured while processing the pids";	
	    	return PIPELET_ERROR;
	    }
	    
   if(pidString==""){
   		pidString="No Productids for processing today";
   }   	    
   pdict.pidString=pidString;    
   return PIPELET_NEXT;
}
/*

function createHastPidSet(customNoTaxClassObject :CustomObject): HashSet{
 	var eo : dw.object.CustomAttributes = customNoTaxClassObject.getCustom();
	var prodIds : String = eo.productId;				 
	var pidArray : Array=prodIds.split(",");
	var hashPid : dw.util.HashSet= new HashSet();
	for(var i=0; i<pidArray.length; i++){
		hashPid.add(pidArray[i]);
	}		
	return hashPid;		
}

function createPidString(hashPid :HashSet): String{
	var pidIterator : Iterator = hashPid.iterator();
	var pidString : String="";
	while(pidIterator.hasNext()){
		var pid : String = pidIterator.next();
		if(pidString==""){
			pidString = "ProductIds to Process : " + pid;	
		}
		else{
			pidString = pidString + ","+ pid;
		}								
	}	
	return pidString;
}

function deleteCustomNoTaxClassObject(CustomNoTaxClassIds : String)
{
    var customObjects = CustomObjectMgr.getAllCustomObjects(CustomNoTaxClassIds);
    for each(var customObject:CustomObject in customObjects){
		CustomObjectMgr.remove(customObject);
	}
}
*/