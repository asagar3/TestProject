/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input Order : dw.order.Order 
*	@output showReturnInfo : Boolean 
* 	@output displayCancelButton : Boolean  
* 	
* 	@output orderShipped : Boolean
	
*	@output showAvailableQuantity : Boolean
*	@output returnedItems : dw.util.List
*   @output trackURL : String	
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );

function execute( pdict : PipelineDictionary ) : Number
{
	
	var	displayCancelButton : Boolean = false; 
	var	showReturnInfo : Boolean = false;
    var	orderShipped : Boolean = false;
	
    var showAvailableQuantity:Boolean=false;
    var order:Order = pdict.Order;
    var paid:Boolean=false;
    var returnedList:List = new ArrayList(); 
    var productLineItem : ProductLineItem = null;
 try{
 	var trackingUrl : String = "" ;
    var orderStatus =order.custom.orderStatus;
    var shipment : Shipment = order.shipments[0];
    if(Site.getCurrent().preferences.custom.orderStatusList!=null){ 
  	for each(var compareStatus in Site.getCurrent().preferences.custom.orderStatusList) {
  	if(orderStatus!=null && orderStatus.equalsIgnoreCase(compareStatus)){
  		
  		orderShipped=true;
  		break;
  	}
  }
  }
  if(Site.getCurrent().preferences.custom.paidOrderStatusList!=null){ 
  for each(var compareStatus in Site.getCurrent().preferences.custom.paidOrderStatusList) {
  	if(orderStatus!=null && orderStatus.equalsIgnoreCase(compareStatus)){
  		
  		paid=true;
  		break;
  	}
  }
  }
  if(!paid && !orderShipped && !(order.custom.displayCancelButton)) {
  	displayCancelButton=true;
  }
  if(Site.getCurrent().preferences.custom.returnOrderStatusList!=null){
  for each(var compareStatus in Site.getCurrent().preferences.custom.returnOrderStatusList) {
  	if(orderStatus!=null && orderStatus.equalsIgnoreCase(compareStatus)){
  		
  		showReturnInfo=true;
  		break;
  	}
  }
  }
  
  				
  				var productLineItems : Collection  =  shipment.getProductLineItems();
				var productLineItemsItr : Iterator = productLineItems.iterator();
  				while(productLineItemsItr.hasNext())
						{
			
								 productLineItem  = productLineItemsItr.next();
								 var returnedQuantity=productLineItem.custom.returnedQuantity;
								 var refundedQuantity=productLineItem.custom.refundedQuantity;
								 var quantityProcessed=productLineItem.custom.processedQuantity;
								 if(quantityProcessed!=null){
								 	showAvailableQuantity=true;
								 }
								 if(showReturnInfo && (returnedQuantity!=null || refundedQuantity != null)){
								 	returnedList.add(productLineItem);
								 	}
								 
						}
   		if(orderShipped){				
			var carrierURL : String = "" ;
			var trackingNumber : String = shipment.trackingNumber;
   
    		var carrierName : String = 	shipment.custom.carrierName;
    		if(carrierName !=null){
    		carrierName=carrierName.toLowerCase();
    		}
    		var urlList : Array = dw.system.Site.getCurrent().preferences.custom.carrierUrlList;
    		if(urlList != null){
				 	for  (var i=0 ; i<urlList.length ;i++) {
				 		 if(urlList[i].getValue()==carrierName){
				 		 	carrierURL=urlList[i].getDisplayValue();
				 		 	break;
				 		 }	
				 	}
    
   	 		//var carrierURL : String  = dw.system.Site.getCurrent().preferences.custom.carrierName;
   	 		if(carrierName == 'fedex'){
   	 			if(shipment.custom.shippingDate != null){
 				var cal : Calendar = new Calendar();
				cal.setTime(shipment.custom.shippingDate);   	 				
   	 			var shipDate : StringUtils = StringUtils.formatCalendar(cal, "yyyyMMdd");
   	 			}
   	 			var fedexURL =dw.system.Site.getCurrent().preferences.custom.append_param_fedex + shipDate ;
   	 			//trackingUrl = carrierURL + trackingNumber + fedexURL;
   	 			trackingUrl = carrierURL.replace("<parcelnumber>", trackingNumber) + fedexURL;
   	 			if (trackingUrl.indexOf("<orderlocale>")>-1) {
	   	 			trackingUrl = trackingUrl.replace("<orderlocale>", order.customerLocaleID.substr(0,2));
	   	 		}
   	 		} else {
   	 			trackingUrl = carrierURL.replace("<parcelnumber>", trackingNumber);
   	 			if (trackingUrl.indexOf("<orderlocale>")>-1) {
	   	 			trackingUrl = trackingUrl.replace("<orderlocale>", order.customerLocaleID.substr(0,2));
	   	 		}
   	 		}
   	 		if(empty(carrierURL) || empty(trackingNumber)){
   	 			trackingUrl = "";
   	 		}
    		}
   		}
   
	
    pdict.showReturnInfo = showReturnInfo;
    pdict.orderShipped=orderShipped;
    pdict.displayCancelButton=displayCancelButton;
    pdict.returnedItems=returnedList;
	pdict.trackURL=trackingUrl;
	pdict.showAvailableQuantity=showAvailableQuantity;
    }
	catch (e)
	{
		Logger.error(e);			
	}
   	
   return PIPELET_NEXT;
}
