/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:

*	@input Order : dw.order.Order 
* 	@output cancelInitiated : Boolean  
* 	@output cancelOrder : Boolean



*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );

function execute( pdict : PipelineDictionary ) : Number
{
	var	cancelInitiated : Boolean = false; 
	var displayButton :Boolean = false;
    var	orderShipped : Boolean = false;
    var cancelOrder : Boolean = false;
  
    var order:Order = pdict.Order;
    var paid:Boolean=false;
    
try{
    var orderStatus =order.custom.orderStatus;
   
   if(Site.getCurrent().preferences.custom.orderStatusList!=null){ 
  	for each(var compareStatus in Site.getCurrent().preferences.custom.orderStatusList) {
  	if(orderStatus!=null && orderStatus.equalsIgnoreCase(compareStatus)){
  		
  		orderShipped=true;
  		break;
  	}
  }
  }
  if(Site.getCurrent().preferences.custom.paidOrderStatusList!=null){ 
  for each(var compareStatus in Site.getCurrent().preferences.custom.paidOrderStatusList) {
  	if(orderStatus!=null && orderStatus.equalsIgnoreCase(compareStatus)){
  		
  		paid=true;
  		break;
  	}
  }
  }
  if(orderStatus==null){ 
  		cancelOrder=true;
  	}
  if(Site.getCurrent().preferences.custom.initiateCancelStatusList!=null){
  	 for each(var compareStatus in Site.getCurrent().preferences.custom.initiateCancelStatusList) {
  		if(orderStatus!=null && orderStatus.equalsIgnoreCase(compareStatus)){ 
  			cancelOrder=true;
  			break;
  		}
  		
  	 }
  }
  
  if(!paid && !orderShipped && !(order.custom.displayCancelButton)) {
  	displayButton=true;
  }
  
  if(displayButton && !cancelOrder){
  	cancelInitiated=true;
  }

/*CR 3077 WorldPay order cancellation issue
if(cancelOrder && !(order.getExportStatus()==Order.EXPORT_STATUS_EXPORTED)){
	order.custom.orderStatus="CANCELLED";
	order.setExportStatus(Order.EXPORT_STATUS_NOTEXPORTED);
	order.custom.displayCancelButton = true;
}*/

if(cancelOrder && !(order.getExportStatus()==Order.EXPORT_STATUS_EXPORTED)){
	if(order.getPaymentInstruments()[0].getPaymentTransaction().paymentProcessor.ID.equals("WORLDPAY")){
	if(order.getExportStatus()==Order.EXPORT_STATUS_READY){
		order.custom.reExportOrderCancellationFlag=true;
		order.custom.displayCancelButton = true;			 
		}
		else
		if(order.getExportStatus()==Order.EXPORT_STATUS_NOTEXPORTED && order.custom.orderStatus.equals("REVIEW") ){
			
		//order.setExportStatus(Order.EXPORT_STATUS_READY); //CR 3102
		order.custom.reExportOrderCancellationFlag=true;
		order.custom.displayCancelButton = true;
	}
	}
	else{
		order.custom.orderStatus="CANCELLED";
		order.setExportStatus(Order.EXPORT_STATUS_NOTEXPORTED);
		order.custom.displayCancelButton = true;		
	}
	}
else if(cancelOrder && (order.getExportStatus()==Order.EXPORT_STATUS_EXPORTED)){
	cancelInitiated=true;
}
if(cancelInitiated && (order.getExportStatus()==Order.EXPORT_STATUS_EXPORTED)){
	order.custom.orderStatus="CancellationInitiated";
	order.setExportStatus(Order.EXPORT_STATUS_READY);
	order.custom.displayCancelButton =true;
}

    pdict.cancelOrder=cancelOrder;
    pdict.cancelInitiated=cancelInitiated;
    
}catch (e)
	{
		Logger.error(e);			
	}
   	

   return PIPELET_NEXT;
}
