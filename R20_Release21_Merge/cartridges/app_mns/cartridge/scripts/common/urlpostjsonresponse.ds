/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input ExampleIn : String This is a sample comment.
*	@input RequestParam : String &req=props,json
*   @output ExampleOut : String
*
*/
importPackage( dw.system );
importPackage( dw.net);
importPackage( dw.util );
function execute( args : PipelineDictionary ) : Number
{

    // read pipeline dictionary input parameter
    // ... = args.ExampleIn;

    // insert business logic here

    // write pipeline dictionary output parameter

    // args.ExampleOut = ...
    //Security Fix Issue-INC000006337221
    var s7host: String = dw.system.Site.getCurrent().getCustomPreferenceValue('scene7RootUrl');
    var company: String = dw.system.Site.getCurrent().getCustomPreferenceValue('s7companyName');
    var httpClient : HTTPClient = new HTTPClient();
	var message : String;
	//Security Fix Issue-INC000006337221
	var urlformed : String =  s7host+ company +args.ExampleIn;
	if (args.RequestParam!=null) {
		urlformed = s7host+ company +args.ExampleIn + args.RequestParam;
	}
	try{
		httpClient.open('GET', urlformed);
		httpClient.send();
		if (httpClient.statusCode == 200){
			message = StringUtils.decodeString(httpClient.text, StringUtils.ENCODE_TYPE_HTML);
		}
	}
	catch(e){
		Logger.error("Exception, while connecting to S7 "+e.message);	
	}
	args.ExampleOut =message;
   return PIPELET_NEXT;
}
