/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input type : String 
*   @input quesId : String 
*   @input intid : String 
*   @input id : String
*   @input paramName : String
*   @input paramValue : String
*	@input queryString : String
*	@input httpParam : dw.util.Map
*   @output location : dw.web.URL

*
*/
importPackage( dw.system );
importPackage( dw.web );
importPackage(dw.util);
function execute( pdict : PipelineDictionary ) : Number
{

    // read pipeline dictionary input parameter
    var pageType : String = pdict.type;
    var ID : String = pdict.id;
    var quesIdVal : String = pdict.quesId;
    var intidVal : String = pdict.intid;
    var paramName : String = pdict.paramName;
    var paramValue : String = pdict.paramValue;
     var httpQueryString : String = pdict.queryString;
    var httpParametersValue : Map = pdict.httpParam;	
   // var paramValue : string = pdict.paramValue;
    //var redirectTo : string = 'home';
    var location : URL = dw.web.URLUtils.httpHome();// set the default URL to Home page
    //conditions to create URL based on page type  
	if(empty(pageType)){// IF PAGE TYPE IS NULL REDIRECT TO HOMEPAGE
    	pdict.location = location ;
		paramName = null;
	}else if (pageType.equalsIgnoreCase('product')){
		location = URLUtils.http("Product-Show","pid",ID);
	}else if (pageType.equalsIgnoreCase('category')){
		location = URLUtils.http("Search-Show","cgid",ID);
	}else if (pageType.equalsIgnoreCase('content')){
		location =URLUtils.url("Page-Show","cid",ID);
	}else if (pageType.equalsIgnoreCase('help')){
		if(empty(quesIdVal) || empty(intidVal)){
			location =URLUtils.url("Page-HelpPageShow","secId",ID);
		}else{
			if(empty(intidVal)){
				location =URLUtils.url("Page-HelpPageShow","secId",ID,"quesId",quesIdVal);
			}else{
				location =URLUtils.url("Page-HelpPageShow","secId",ID,"quesId",quesIdVal,"intid",intidVal);
			}
		}
	}else {//do nothing
		if(!pageType.equalsIgnoreCase('home')){
		paramName = null;
		}	
	}
	// Changes done for additional url parameters.
	//If paramName is not null then this code will be called.
	if(!empty(paramName)){		
		 var paramCounter=0;
		 // queryStringArray has string array of all values of query string saparated by delimeter "&".
		 var queryStringArray : Array = httpQueryString.split("&");
		 // This counts occurence number of paramname.
		 if(!empty(queryStringArray)) {
	          for(var i = 0;i<queryStringArray.length-1;i++) { 
	        	if(queryStringArray[i].match("paramName")) {
	        			paramCounter++;
	        }
	        }
	    		var i = 0;
				var paramID : String = null;
				var paramV : String = null;
				var id : Object = null;
				var pValue : Object = null;
				// This while loop checks if paramName or paramName1, paramName2 and so on exist in query string then add to final location URL  
	              while(i<paramCounter){
	                     if(httpParametersValue.containsKey("paramName"+i)){
	                     		id = httpParametersValue.get("paramName"+i)[0];     
	                           paramID = id.toString();                     
	                           pValue  = httpParametersValue.get("paramValue"+i)[0];    
	                           paramV = pValue.toString();  
	                     }else if(httpParametersValue.containsKey("paramName")){
	                     		id = httpParametersValue.get("paramName")[0];     
	                           paramID = id.toString();                     
	                           pValue  = httpParametersValue.get("paramValue")[0];    
	                           paramV = pValue.toString();
	                    }   
	                    // Adds additional parameters to location url.
	                    location = location.append(paramID,paramV);    	
	                     i++;
	     }
		}
		pdict.location = location;
		return PIPELET_NEXT ;  
}
}
