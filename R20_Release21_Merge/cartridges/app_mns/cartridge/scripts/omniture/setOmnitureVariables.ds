/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input product : dw.catalog.Product
*   @input productSearchResult : dw.catalog.ProductSearchModel
*	@input content : dw.content.Content
*	@input folder : dw.content.Folder

*   @output pageName : String
*   @output channel : String
*   @output prop1 : String
*   @output prop18 : String
*   @output evar25 : String
*
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.util );
importPackage( dw.web );

function execute( pdict : PipelineDictionary ) : Number
{
	var pageName : String = "" ;
	var channel : String = "" ;
	var prop1 : String = "" ;
	var prop18 : String = "" ;
	var evar25 : String = "" ;

	//On PDP and PSP pages
	if (pdict.product != null){
		pageName = pdict.product.name;
		if (pdict.productSearchResult != null && !empty(pdict.productSearchResult.category)) {
			var path : ArrayList = createCategoryHierarchy(pdict.productSearchResult.category);
			channel = setChannel(path);
			prop1 = setProp1(path);
			prop18 = setProp18(path);
			evar25 = setEvar25(path);
		}
	//On Category Landing, Product List and Search Result Pages
	} else if (pdict.productSearchResult != null) {
		//Category Landing & Product List Pages
		if (!empty(pdict.productSearchResult.category)){
			//Omniture Changes After Go Live | pageName for Category Pages should reflect the breadcrumb | Naveen Kumar
			//pageName = pdict.productSearchResult.category.displayName;
				var path : ArrayList = createCategoryHierarchy(pdict.productSearchResult.category);
				pageName = setPageName(path);
				channel = setChannel(path);
				prop1 = setProp1(path);
				prop18 = setProp18(path);
				evar25 = setEvar25(path);
		//Search Result Pages
		} else if (!empty(pdict.productSearchResult) && !empty(pdict.productSearchResult.searchPhrase)) {
			pageName = Resource.msg('omniture.title.searchresult','omniture',null);
			channel = Resource.msg('omniture.channel.searchresult','omniture',null);
			prop1 = Resource.msg('omniture.channel.searchresult','omniture',null);
			prop18 = Resource.msg('omniture.channel.searchresult','omniture',null);						
		}
	//On Content Pages
	} else if (pdict.content !=  null){
		pageName = pdict.content.pageTitle;
		if (pageName == null) {
			pageName = pdict.content.name;
		}
	//On Folder Pages (Home Page)
	} else if (pdict.folder !=  null){
		//Omniture Changes After Go Live | pageName for home page should be 'Home' | Naveen Kumar
		//pageName = pdict.folder.pageTitle;
		//if (pageName == null) {
			pageName = Resource.msg('omniture.title.homepage','omniture',null);
		//}
	}

	pdict.pageName = pageName ;
	pdict.channel = channel ;
	pdict.prop1 = prop1 ;
	pdict.prop18 = prop18 ;
	pdict.evar25 = evar25 ;
	
	return PIPELET_NEXT;
}

function createCategoryHierarchy (currentCat : Category) : Collection {	
	var path : ArrayList = new ArrayList();
	var cat : Category = currentCat;
	while( cat.parent != null )
	{
		if( cat.online ) path.addAt( 0, cat );
		cat = cat.parent;
	}
	return path;
}

function setPageName (path : ArrayList) : String {
	//Omniture Changes After Go Live | pageName for Category Pages should reflect the breadcrumb | Naveen Kumar
	var pageName : String = Resource.msg('omniture.title.homepage','omniture',null);
	for (var i=0; i < path.length; i++){
		pageName = pageName + ":" +path[i].displayName;
	}		
	return pageName;
}

function setChannel (path : ArrayList) : String {
	var channel : String = "";
	if (path.length > 0){
		channel = path[0].displayName;
	}	
	return channel;
}

function setProp1(path : ArrayList) : String {
	var prop1 : String = "";	
	
	if (path.length > 1) {
		prop1 = path[0].displayName + ":" + path[1].displayName;
	}else if (path.length > 0){
		prop1 = path[0].displayName;
	}	
	return prop1;
}

function setProp18(path : ArrayList) : String {
	var prop18 : String = ""; 
	if (path.length > 2){
		prop18 = path[0].displayName + ":" + path[1].displayName + ":" + path[2].displayName;
	} else if (path.length > 1) {
		prop18 = path[0].displayName + ":" + path[1].displayName;
	}else if (path.length > 0){
		prop18 = path[0].displayName;
	}	
	return prop18;
}

function setEvar25(path : ArrayList) : String {
	var evar25 : String = path[0].displayName;
	for (var i = 1; i < path.length; path++){
		evar25 = evar25 + ":" + path[i].displayName;
	} 
	return evar25;
}
