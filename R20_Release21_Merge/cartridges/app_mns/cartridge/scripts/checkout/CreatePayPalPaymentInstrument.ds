/**
 * Creates a payment instrument for PayPal
 * for the given basket. If any error occurs the pipelet returns PIPELET_ERROR with
 * no payment instrument being created. If the creation succeeded the script returns 
 * the newly created payment instrument.
 *
 * Only single PayPal payments are allowed. 
 *
 * @input Basket : dw.order.Basket The basket.
 * @input PaymentType : String the type of the payment instrument.
 * @input RemoveExisting : Boolean if true, removes any other payment instruments of the same type
 * @output PaymentInstrument : dw.order.PaymentInstrument The created payment instrument.
 */
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.value );
importPackage( dw.web );

importScript("checkout/Utils.ds");

function execute( pdict : PipelineDictionary ) : Number
{
    var basket : Basket = pdict.Basket;
	var paymentType : String = pdict.PaymentType;
	var removeExisting : Boolean = pdict.RemoveExisting;

	// verify that we have a basket
	if( basket == null || paymentType == null || removeExisting == null)
	{
		return PIPELET_ERROR;
	}

	// remove existing payment instruments
	if (removeExisting)
	{
		removeExistingPaymentInstruments( basket );
	}
	
	// calculate the amount to be charged
	var amount = calculateNonGiftCertificateAmount( basket );

	// create a payment instrument
	var paymentInstr : PaymentInstrument = basket.createPaymentInstrument( paymentType, amount );
	
	pdict.PaymentInstrument = paymentInstr;
    return PIPELET_NEXT;
}

/** 
 * Determines if the basket already contains a payment 
 * instrument and removes it from the basket.
 */
function removeExistingPaymentInstruments( basket : Basket )
{
	// get all payment instruments
	var ccPaymentInstrs : Collection = basket.getPaymentInstruments();
	var iter : Iterator = ccPaymentInstrs.iterator();
	var existingPI : OrderPaymentInstrument = null;

	// remove them
	while( iter.hasNext() )
	{
		existingPI = iter.next();
		basket.removePaymentInstrument( existingPI );
	}
}
