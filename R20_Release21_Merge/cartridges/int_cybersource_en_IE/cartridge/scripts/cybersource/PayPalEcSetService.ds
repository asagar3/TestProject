/**
* Demandware Script File
* Script file for calling the PayPal ECSetReply Service
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* @input Basket : dw.order.Basket The basket used for Authorization
* @input CurrentRequest : dw.system.Request
* @input OrderNo : String order no
* @input  shipTo : Object
* @input  purchaseTotals : Object
* @input returnUrl : dw.web.URL
* @input cancelUrl : dw.web.URL
* @input lineItemList: dw.util.ArrayList
* @output location : String location
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output paypalToken : String paypal Token returned by Cybersource
* @output decision : String decision returned by Cybersource
* @output reasonCode : dw.util.BigInteger reasonCode returned by Cybersource
* @output StatusMessage : String
* @output OmnitureMessage : String
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );

importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	if(session.custom.csDeclineCounter == null) {
		var csDeclineCounter : Number = 0;
		session.custom.csDeclineCounter = csDeclineCounter;
	}
	
	if(session.custom.csErrorCounter == null) {
		var csErrorCounter : Number = 0;
		session.custom.csErrorCounter = csErrorCounter;
	}
	var response = null;
  	var basket : Basket = pdict.Basket;
    var orderNo : String = pdict.OrderNo;
    var shipTo: ShipTo_Object = pdict.shipTo;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var lineItemList: ArrayList = pdict.lineItemList;
	var billTo: BillTo_Object = new Object();
	var CybersourceHelper = getCybersourceHelper();
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	var currRequest : Request = pdict.CurrentRequest;	
	var language : Array = currRequest.getLocale().split('_');
	var countryLocale:String = null;
	if (language[0].toLowerCase().equals("en")){
		countryLocale = "GB";
	}
	else {
		countryLocale = language[0].toUpperCase();
	}
	if(basket.defaultShipment.shippingMethod.ID.equals("COLLECTION_POINT") || basket.defaultShipment.shippingMethod.ID.equals("STORE_COLLECTION")){
			shipTo.setFirstName(dw.web.Resource.msg('paypal.shiptostore','checkout',null));			
	}
	CybersourceHelper.setEndpoint(service);
	if(!CybersourceHelper.createPayPalHeader(service)){
		return PIPELET_ERROR;
	}
	var request = new csReference.RequestMessage();
	CybersourceHelper.addPayPalAuthRequestInfo(request, billTo, shipTo , purchaseObject,pdict.returnUrl,pdict.cancelUrl,orderNo,lineItemList);
	   	
	try{
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[PayPalEcSetService.ds] Error in PayPal request ( {0} )",e.message);
		Logger.error("[PayPalEcSetService.ds] Error in PayPal request ( {0} )",e.message);
		pdict.StatusMessage="[PayPalEcSetService.ds] Error in PayPal request ( {0} )"+e.message;
		pdict.OmnitureMessage = "paypalerror";
		if(e.message.indexOf("SocketTimeoutException") != -1) {
            pdict.reasonCode = 999; //set timeout error code 999
            return PIPELET_NEXT;
		}       
		
		if(empty(response) || response.decision == null || response.reasonCode == null) {	
			pdict.StatusMessage = "Empty response , Error Message::"+e.message;		
			pdict.decision = "ERROR";
		}
	}	
	if(response == null) {
		Logger.getRootLogger().fatal("[PayPalEcSetService.ds] Error in PayPal request: null response");		
		pdict.StatusMessage="PayPalEcSetService.ds Null Response";
		pdict.OmnitureMessage = "paypalerror";
		pdict.decision = "ERROR";
		return PIPELET_ERROR;
	}
	Logger.debug("response.payPalEcSetReply.paypalToken"+response.payPalEcSetReply.paypalToken+"----"+CybersourceHelper.getPaypalUrl()+"---"+countryLocale);
	pdict.reasonCode = response.reasonCode;
	pdict.decision = response.decision;
	if (response.reasonCode != "100") {		
		pdict.OmnitureMessage = "paypalerror";
		return PIPELET_ERROR;
	}
	else {
		Logger.warn("PayPalEcSetService: RequestID : "+response.requestID);   
		Logger.warn("PayPalEcSetService: Decision : "+response.decision);  
		Logger.warn("PayPalEcSetService: ReasonCode : "+response.reasonCode);  
		Logger.warn("PayPalEcSetService: OrderNo : "+orderNo);  
	 	pdict.location = CybersourceHelper.getPaypalUrl()+response.payPalEcSetReply.paypalToken+"&country.x="+countryLocale;
		pdict.RequestID = response.requestID;
		pdict.RequestToken = response.requestToken;
		pdict.paypalToken = response.payPalEcSetReply.paypalToken;
    	return PIPELET_NEXT;
	}	
}