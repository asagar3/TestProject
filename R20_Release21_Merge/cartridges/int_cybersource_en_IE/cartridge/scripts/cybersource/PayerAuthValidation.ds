/**
* This script validates the PayerAuth information the customer provided 
* It always returns PIPELET_NEXT in case the request was successful.
* PIPLET_ERROR is only used in case of an technical problem 
*
*
* @input PaRes : String The PaRes returned by the authentication
* @input Amount : dw.value.Money The amount to authorize

 
*
* @input Basket : dw.order.Basket The basket used for Authorization

* @input OrderNo : String The order no
* @input CreditCardForm : dw.web.FormElement The form containing the credit card data
* @input CreditCardData : Object
* @input IPAddress : String The client's IP address
* @input lineItemList : dw.util.ArrayList 
* @input  billTo : Object 
* @input  shipTo : Object
* @input  merchantDefinedData : Object
* @input  card : Object
* @input  purchaseTotals : Object 
* @input  sessionID : String 
* @input Request : dw.system.Request
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output PAVRequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthenticationResult : String the return field
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String the amount authorized by Cybersource
* @output AuthorizationCode : String the authorizationCode by Cybersource
* @output CVCode : String   Card verification code returned from ccAuthReply
* @output AuthenticationStatusMessage : String the return field
* @output CAVV : String the return field
* @output UCAFAuthenticationData : String the return field
* @output UCAFCollectionIndicator : String the return field
* @output CommerceIndicator : String the return field
* @output XID : String the return field
* @output ECIRaw : String the return field
* @output StatusMessage : String
*
*/
importPackage( dw.system );

importScript('int_cybersource:cybersource/Cybersource_BillTo_Object.ds');
importScript('int_cybersource:cybersource/Cybersource_ShipTo_Object.ds');
importScript('int_cybersource:cybersource/Cybersource_Card_Object.ds');
importScript('int_cybersource:cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');
importScript('int_cybersource:cybersource/Cybersource_MerchantDefinedData_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	Logger.error("PaRES....(" + pdict.PaRes + ").......(" + dw.util.StringUtils.trim(pdict.PaRes)+")");
	var signedPaRes : String = dw.util.StringUtils.trim(pdict.PaRes);
	//var signedPaRes : String =pdict.PaRes;
	signedPaRes = signedPaRes.replace(/[^a-zA-Z0-9/+=]/g,""); 
	var orderNo : String = pdict.OrderNo;
    var amount : dw.value.Money = pdict.Amount;
    var creditCardForm : dw.web.FormElement = pdict.CreditCardForm;
    
    
	var ccdata : CreditCardInfoHelper = pdict.CreditCardData;
    var basket : Basket = pdict.Basket;
    
   	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	var creditCardForm : dw.web.FormElement = pdict.CreditCardForm;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var merchantDefinedDataObject: MerchantDefinedData_Object = pdict.merchantDefinedData;
	  
    var request : Request = pdict.Request;
    var sessionID : String = pdict.sessionID;
	if(basket == null || amount == null){
		Logger.error("Please provide a Basket!");
		pdict.StatusMessage="Please provide a Basket!";
		return PIPELET_ERROR;
	}
	var CybersourceHelper = getCybersourceHelper();
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");

	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}
	

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addPayerAuthValidateInfo(request,orderNo,signedPaRes,creditCardForm,amount.currencyCode);
	CybersourceHelper.addCCAuthRequestInfo_PA(request,billToObject,shipToObject,purchaseObject,cardObject,orderNo,merchantDefinedDataObject,sessionID,pdict.lineItemList);

	var response = null;
	// send request
	try{
		Logger.debug("[PayerAuthValidation.ds] Sending PayerAuthValidation...");
		response = service.runTransaction(request);
	}catch(e){
		Logger.error("[PayerAuthValidation.ds] Error in PayerAuthValidation request ( {0} )",e.message);
		pdict.StatusMessage="[PayerAuthValidation.ds] Error in PayerAuthValidation request ( {0} )"+e.message;
		return false;
	}
	
	if(response == null){
		return PIPELET_ERROR;
	}
	
	pdict.PAVRequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if(response.payerAuthValidateReply != null){
		pdict.AuthenticationResult = response.payerAuthValidateReply.authenticationResult;
		pdict.AuthenticationStatusMessage = response.payerAuthValidateReply.authenticationStatusMessage;
		pdict.CAVV = response.payerAuthValidateReply.cavv;
		pdict.UCAFAuthenticationData = response.payerAuthValidateReply.ucafAuthenticationData;
		pdict.UCAFCollectionIndicator = response.payerAuthValidateReply.ucafCollectionIndicator;
		pdict.CommerceIndicator =  response.payerAuthValidateReply.commerceIndicator;
		pdict.XID = response.payerAuthValidateReply.xid;
		pdict.ECIRaw = response.payerAuthValidateReply.eciRaw;
		Logger.error("order/reference number Payment Validation::::::::::::::::::::::: " + orderNo);
		Logger.error("Request ID for Payment Validation::::::::::::::::::::::: " + response.requestID);
		Logger.error("The reason code for Payment Validation::::::::::::::::::::::: " + response.reasonCode.get());
	}
	if ( null != response.ccAuthReply )
	{
		pdict.AuthorizationAmount = response.ccAuthReply.amount;
		pdict.AuthorizationCode = response.ccAuthReply.authorizationCode;
		pdict.AuthorizationReasonCode = response.ccAuthReply.reasonCode.get();
		pdict.CVCode = response.ccAuthReply.cvCode;
		Logger.error("CVCode #######"+response.ccAuthReply.cvCode);
	
	}

    return PIPELET_NEXT;
}
