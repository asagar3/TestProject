/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*    @output rejectedOrders : dw.util.HashMap
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.order );

function execute( args : PipelineDictionary ) : Number
{

    Logger.error("[getPendingOrders.ds] START: Orders which got no confirmation from Worldpay ----------------");
	 
	var pendingOrderTime : Number = Site.getCurrent().getCustomPreferenceValue("worldpayPendingTime");
    var rejectedOrdersList :HashMap = new HashMap();
	
	var currentDateAndTime : Date = new Date(); 
	var newQuery : String = "custom.orderStatus = {0} AND creationDate <= {1}" ;
	var orderStatus : String = "REVIEW";
	var dateAndTimeToCompare : Date = subtractMinutesFromDate(currentDateAndTime, pendingOrderTime);

	
	var pendingOrdersList : SeekableIterator = OrderMgr.queryOrders(newQuery, "orderNo desc", orderStatus, dateAndTimeToCompare);
	

	//Iterate the orders 	
	while (pendingOrdersList.hasNext()){
		var order : Order = pendingOrdersList.next();
		if(order.paymentInstruments[0].paymentTransaction.paymentProcessor.ID.equals("WORLDPAY")){
		var orderDetails :Array = new Array();
		
		var status: String = order.custom.orderStatus;
		
			orderDetails[0] =order.shipments[0].shippingAddress.title;
			orderDetails[1] =order.shipments[0].shippingAddress.firstName;
			orderDetails[2] =order.shipments[0].shippingAddress.lastName;
			orderDetails[3] =order.customerEmail;
			orderDetails[4] = order.customerLocaleID;
			rejectedOrdersList.put(order.orderNo,orderDetails);
			order.custom.orderStatus = "CANCELLED";
			order.setExportStatus(Order.EXPORT_STATUS_NOTEXPORTED);
		
		}else{
			continue;
		}
	}
	pendingOrdersList.close();	
	args.rejectedOrders =rejectedOrdersList;		
	
  return PIPELET_NEXT;
}

function subtractMinutesFromDate(date: Date, minutes : Number) : Date {	
	var newDateTime : Number = date.getTime() - (minutes * 60 * 1000); // convert minutes into milliseconds	
	return new Date(newDateTime);
}
