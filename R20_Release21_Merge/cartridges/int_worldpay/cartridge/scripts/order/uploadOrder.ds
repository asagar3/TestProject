/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input orderNo : String
*   @input basket : dw.order.Basket Basket
*	@input customer : dw.customer.Customer
*	@input paymentType : String
*	@input bank : String
*	@input bankCountry : String
*   @output redirectURL : String
*   @output worldpayError : String
*   @output StatusMessage : String
*
*/
importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.order );
importPackage( dw.value );
importPackage( dw.customer );
importScript("int_worldpay:lib/worldPay.ds");
importScript("int_worldpay:lib/responseData.ds");
importScript("int_worldpay:lib/orderXML.ds");
function execute( pdict : PipelineDictionary ) : Number
{
   	
	//Nadeem- initialising the session variables attribute 'csDeclineCounter' and 'csErrorCounter' for checking the declined attempts and error scenarios
	if(session.custom.csDeclineCounter == null)
	{
		var csDeclineCounter : Number = 0;
		session.custom.csDeclineCounter = csDeclineCounter;
	}
	
	if(session.custom.csErrorCounter == null)
	{
		var csErrorCounter : Number = 0;
		session.custom.csErrorCounter = csErrorCounter;
	}
	//end
	
	Logger.error("@@@@int_worldpay:Start worldpay transaction for >>>>"+pdict.orderNo);
   	try{  
   	var result : String = createRequest(
   		pdict.orderNo,
   		calculateNonGiftCertificateAmount( pdict.basket ), 
   		pdict.basket, pdict.customer, pdict.bank, pdict.bankCountry, pdict.paymentType);
   	
   	
   	if(result!= null && result.indexOf("SocketTimeoutException") > 0)
   	{
   		pdict.StatusMessage="Error Detail:"+ result;
   		result=null;
   	}   		
   	var response : ResponseData = parseResponse(result);
	
	if (response == null) {
		pdict.worldpayError="true";
		return PIPELET_ERROR;		
	}
	if (response.isError()) {
		pdict.worldpayError=response.errorCode.toString();
		return PIPELET_ERROR;		
	}
   	}catch(e){
   		Logger.error("@@@@int_worldpay:Exception in Script@@@@@"+e);
   		pdict.worldpayError="00";
   		pdict.StatusMessage="Error Detail:"+e;
   		return PIPELET_ERROR;
   	}
	var redirectURL : String = response.reference.toString();
	Logger.error("Redirect URL received from Worldpay::" + redirectURL);
   	pdict.redirectURL =createRedirectURL(redirectURL, pdict.orderNo);
   	Logger.error("Redirect URL created for Worldpay::" + pdict.redirectURL);
   	
   	return PIPELET_NEXT;
}

