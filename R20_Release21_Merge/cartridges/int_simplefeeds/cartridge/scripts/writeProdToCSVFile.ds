/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input productObj : dw.catalog.Product This is a sample comment.
*   @input writer : dw.io.CSVStreamWriter This is a sample comment.
*   @input site : String This is a sample comment.
*   @output errorMsgFromScript : String
*
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.io );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{
	
	var str : String = "";
	var prodId : String = "";
	try{
		
		var writer : CSVStreamWriter = args.writer;
		var product : Product = args.productObj;
		var parentId : String = "";
		var deptNumber : String = "";
		var stroke : String = "";
		var color : String = "";
		var site : String = args.site;
		var CustomTaxClass: String = "NOT_AVAILABLE";
		var listPrice : String = "NOT_AVAILABLE";
		var salesPrice : String = "NOT_AVAILABLE";
		
		var arr : Array = null;
		
		
		
		if(empty(product))
		{
			Logger.error("LCM writeProdToCSVFile.ds product is null="+product);
			return PIPELET_NEXT;
		}
		if(!empty(product.ID))
		{
			prodId = product.ID;
		}
		if(!empty(product.custom.deptNumber))
		{
	 		deptNumber = product.custom.deptNumber;
		}
		if(!empty(product.custom.stroke))
		{
			stroke = product.custom.stroke;
		}
		if(!empty(product.custom.color))
		{
			color = product.custom.color;
		}
		if(product.isVariant()){
			parentId = product.getVariationModel().master.ID; 
		}
		var defaultPrice = dw.system.Site.current.preferences.custom.listPriceDefault;
		var priceValue = product.getPriceModel().getPriceBookPrice(defaultPrice).getValueOrNull();
		if(priceValue != null){
		listPrice = product.getPriceModel().getPriceBookPrice(defaultPrice).value;
		}
		var sPrice = dw.system.Site.current.preferences.custom.salesPriceDefault;
		var salesPriceValue = product.getPriceModel().getPriceBookPrice(sPrice).getValueOrNull();
		if(salesPriceValue != null){
		salesPrice = product.getPriceModel().getPriceBookPrice(sPrice).value;
		}		
		if(!empty(product.custom.customTaxClass))
		{
			CustomTaxClass = product.custom.customTaxClass;
		}
		
		var avm:ProductAvailabilityModel = product.availabilityModel ;
		var quantity :String = "N/A" ;
		var stockStatus:Boolean = avm.inStock ;	
		if(avm.inventoryRecord != null){		
					quantity =  avm.inventoryRecord.ATS.value ;				 	
		}
		
		
		str = "'"+prodId + "'," + parentId + "," + deptNumber + "," + stroke + "," + color + "," + site + "," + listPrice + "," + salesPrice + "," + CustomTaxClass + "," + quantity;
		arr = str.split(",");
		writer.writeNext(arr);
		
	    return PIPELET_NEXT;
	   
	}
	catch(e)
	{
	Logger.error("writeProdToCSVFile.ds" + String(e));
	args.errorMsgFromScript = String(e); 
	return PIPELET_ERROR;
	}
return PIPELET_NEXT;
}
