/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
* @input TempFolder : String  mandatory, e.g. "inventory", folder is underneath Impex share, src folder
* @input FilePattern : String  mandatory, file name pattern at temporary folder
* @output ShrinkFile : String  Name of the Shrink file relative to the Impex share, src folder
* @output OriginalFile : String  Name of the Original file relative to the Impex share, src folder
* @output TechnicalError : String  "TRUE" technical error occured, "FALSE" there are no more matching files
* @output inventoryFound : Boolean This variable will be used to send the Inventory Record E-mail 
 */
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.object );
importPackage( dw.catalog );
importPackage( dw.io );
importPackage( dw.net );

var technicalError : String;
var pidList : HashSet = null;

var PRICEBOOKS : String = "pricebooks";
var PRICEBOOK : String = "pricebook";
var HEADER : String = "header";
var PRICEBOOK_ID : String = "pricebook-id";
var PRICE_TABLES : String = "price-tables";
var PRICE_TABLE : String = "price-table";
var PRODUCT_ID : String = "product-id";
//var regExpRecordEnd : RegExp = new RegExp( "</pricetable>" );
function execute( args : PipelineDictionary ) : Number
{
	var shrinkStartDate : Date = new Date(); 
		// indicate technical error as default, in case we error during processing
	args.TechnicalError = "TRUE";
	technicalError = args.TechnicalError;
	// read parameters
    var tempFolder : String = args.TempFolder;
    var filePattern : String = args.FilePattern;
    // check parameters
    if ( empty( tempFolder ) )
    {
    	Logger.getLogger("ShrinkFeed").error( "ShrinkFeed: Parameter TempFolder empty" );
    	return PIPELET_ERROR;
    }

    if ( empty( filePattern ) )
    {
    	Logger.getLogger("ShrinkFeed").error( "ShrinkFeed: Parameter filePattern empty" );
    	return PIPELET_ERROR;
    }

    Logger.getLogger("ShrinkFeed").debug( "ShrinkFeed: " +
    	"FilePattern: " + filePattern + ", " +
    	"TempFolder: " + tempFolder );	
   
    //Check if file pattern file exists in temp folder
    // get list of all files in folder
	var impexFiles : Collection = listImpexFiles( tempFolder );
	if ( impexFiles == null )
	{
		// there was a technical problem
		// no more files to process
		args.TechnicalError = "FALSE";
		return PIPELET_ERROR;
	}
	
    // filter list
	impexFiles = filterMatchingFiles( impexFiles, filePattern );
	
	// sort list
	var impexFile : SortedSet  = new SortedSet( impexFiles );
	
	if ( impexFile.length == 0 )
	{
		// no more files to process
		args.TechnicalError = "FALSE";
		return PIPELET_ERROR;
	}

	// pick the first file from the collection
	var originalFile : String = impexFile[0];
	
	var shrinkFile : String = createShrinkFile(tempFolder, originalFile, args);
    args.TechnicalError = technicalError;	
	/*if ( !uploadFile( remoteFolderURL, remoteLogin, remotePassword, remoteFile, createdFile ) )
	{
		// error downloading file
		//return PIPELET_ERROR;
	}*/
	args.ShrinkFile = tempFolder + File.SEPARATOR + shrinkFile;
	args.OriginalFile = tempFolder + File.SEPARATOR + originalFile;
	var shrinkEndDate : Date = new Date(); 
	var timeTaken : Number = shrinkEndDate.getTime()-shrinkStartDate.getTime();
	Logger.getLogger("ShrinkFeed").debug( "ShrinkFeed: Time taken " +	timeTaken);	
	Logger.getLogger("ShrinkFeed").error( "ShrinkFeed: Time taken " +	timeTaken);	
	return PIPELET_NEXT;
}

function createShrinkFile(tempFolder : String, fileOriginal : String, args : PipelineDictionary) : String
{
	//variable to check for sending the mail, if Inventory records are not found
	var inventoryFound : Boolean = false;
	//shrink file writer
	var shrinkFile = "shrink_" + fileOriginal;
	var xmlReader : XMLStreamReader = null;
	var element : XML = null;
	var productid : String = null;
	try {
		var filePath : String = File.IMPEX + "/src" + File.SEPARATOR + tempFolder + File.SEPARATOR;
		var file : File = new File(filePath + fileOriginal);
		var fileReader : FileReader = new FileReader(file);
		if( !fileReader ) {
			Logger.error("ShrinkFeed: File not found: " + file);
		} else {
			var fileOut : File = new File(filePath + shrinkFile);
			if (! fileOut.exists()) 
			{
		    	fileOut.createNewFile();
			}
			
			var fileWriter : FileWriter = new FileWriter(fileOut);
			var writer : XMLStreamWriter  = new XMLStreamWriter(fileWriter);
	           
           //reader file using stream reader
           	var countProduct : Number = 0;
            var productIdValue : String="";
			var tempLocalName : String="";
			var parseEvent : Number = 0;
			xmlReader = new XMLStreamReader(fileReader);
			file = null;
			fileOut = null;
			while (xmlReader.hasNext()) {
				parseEvent = xmlReader.next();
				if (parseEvent==XMLStreamConstants.START_ELEMENT) {
					tempLocalName = StringUtils.trim(xmlReader.getLocalName());
				  if (PRICEBOOKS.equalsIgnoreCase(tempLocalName)) {
				  	writer.writeStartElement(PRICEBOOKS);
				  	writer.writeDefaultNamespace(xmlReader.getNamespaceURI());
				  	writer.writeRaw("\r\n");
				  } else if (PRICEBOOK.equalsIgnoreCase(tempLocalName)) {
				  	writer.writeStartElement(PRICEBOOK);
				  } else if (HEADER.equalsIgnoreCase(tempLocalName)) {
		      	  	writer.writeStartElement(HEADER);
					writer.writeAttribute(PRICEBOOK_ID, xmlReader.getAttributeValue(null,PRICEBOOK_ID));
					element = xmlReader.XMLObject;
		      	  	for each( var childs : XML in element.children() ) {
						if( childs.localName() ) {
							writer.writeStartElement(childs.localName().toString());
							writer.writeCharacters(childs.valueOf().toString());
							writer.writeEndElement();
						}
					}
					writer.writeEndElement();//header end
					writer.writeRaw("\r\n");
			      } else if (PRICE_TABLES.equalsIgnoreCase(tempLocalName)) {
				  	writer.writeStartElement(PRICE_TABLES);
					//writer.writeRaw("\r\n");
				  } else if (PRICE_TABLE.equalsIgnoreCase(tempLocalName)) {
				  	countProduct++;
			      	productIdValue = xmlReader.getAttributeValue(null,PRODUCT_ID);
					element = xmlReader.XMLObject;
					if (isProductExist(productIdValue)) {
						writer.writeStartElement(PRICE_TABLE);
						writer.writeAttribute(PRODUCT_ID, productIdValue);
						args.inventoryFound = true;
						
						for each( var childs : XML in element.children() ) {
							if( childs.localName() ) {
								writer.writeStartElement(childs.localName().toString());								
								for each( var attr : XML in childs.attributes() ) {
									writer.writeAttribute(attr.localName().toString(), attr.valueOf().toString());
								}																
								writer.writeCharacters(childs.valueOf().toString());
								writer.writeEndElement();
							}
						}
						
						writer.writeEndElement();
					}
			      }
			    }
			    if (parseEvent==XMLStreamConstants.END_ELEMENT) {
			    	tempLocalName = StringUtils.trim(xmlReader.getLocalName());			    			    	
			   		if (PRICEBOOK.equalsIgnoreCase(tempLocalName) ||
			   				PRICE_TABLES.equalsIgnoreCase(tempLocalName)) {
				  		writer.writeEndElement();
				  		writer.writeRaw("\r\n");					
			   		}			    	
			    }
				if (countProduct==100) {
					writer.flush();
					countProduct = 0;
				}
            }
           xmlReader.close();   // close reader
           
			writer.writeEndElement();
			writer.writeEndDocument();
			writer.flush();
			writer.close();
			fileWriter.close();			
		}
		technicalError = "FALSE";
	} catch (e) {
		technicalError = "TRUE";
		Logger.error( "ShrinkFeed: Error " + e );
		//Logger.getLogger("ShrinkFeed").debug( "ShrinkFeed: Error " + e );
	}
	return shrinkFile;
}

function getPidList() {
	//prepare list of Product IDs if not created already
	if (pidList==null) {
		pidList =  new HashSet();
		var itr : SeekableIterator = dw.catalog.ProductMgr.queryAllSiteProducts();
	    while (itr.hasNext()) {
	    	pidList.add(((Product) (itr.next())).getID());
	    }
	}
}

function isProductExist(pid : String) : String {
	//check if Product ID passed as parameter exists in the list
	var pidExists : Boolean = false;
	
	if (null == pidList) {
		getPidList();
	}
	
	if (pidList.contains(pid)) {
		pidExists = true;
	}
	return pidExists;
}

function listImpexFiles(folderURL : String) : Collection
{
	var folderObj : File = new File(File.IMPEX + "/src" + File.SEPARATOR + folderURL);
	
	var files : Array;
	
	var remoteFiles : Collection = new ArrayList();
	
	if ( folderObj.exists() ) {
		for each ( var file : File in folderObj.listFiles() )
		{
			// filter out directories; this will automatically remove the current folder from the list
			if ( !file.directory )
			{
				Logger.getLogger("ShrinkFeed").debug( "ShrinkFeed: Listing file: " + file.name );
				remoteFiles.add( file.name );
			}		
		}
	}
	
	return remoteFiles;
}

function filterMatchingFiles( remoteFiles : Collection, remoteFilePattern : String ) : Collection
{
	var regExp : RegExp = new RegExp( remoteFilePattern );

	var filteredRemoteFiles : Collection = new ArrayList();
	
	for each ( var remoteFile : String in remoteFiles )
	{
		if ( regExp.test( remoteFile ) )
		{
			Logger.getLogger("ShrinkFeed").debug( "ShrinkFeed: Matching file: " + remoteFile );
			filteredRemoteFiles.add( remoteFile );
		}
	}
	
	return filteredRemoteFiles;
}

function createAttributes(xmlReader : XMLStreamReader, writer : XMLStreamWriter) : XMLStreamReader {	
	var index : Number;	
	var attrName : String;
	var attrValue : String;
	
	for (index=0; index<xmlReader.getAttributeCount(); index++){		
		if (!empty(xmlReader.getAttributePrefix(index))){
			attrName = xmlReader.getAttributePrefix(index) + ":" + xmlReader.getAttributeLocalName(index);
		}else {
			attrName = xmlReader.getAttributeLocalName(index);
		}	
		attrValue = xmlReader.getAttributeValue(index);				
		writer.writeAttribute(attrName, attrValue);
	}	
	return xmlReader;
}
