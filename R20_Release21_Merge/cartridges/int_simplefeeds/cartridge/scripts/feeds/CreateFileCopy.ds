/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
* @input RemoteFolderURL : String  mandatory, URL to WebDAV or SFTP folder, e.g. "https://www.myserver.com/folder/", "sftp://sftp.myserver.com:22/folder/"
* @input RemoteLogin : String  mandatory, login for WebDAV Basic Authentication or Digest Autentication or SFTP
* @input RemotePassword : String  mandatory, password for WebDAV Basic Authentication or Digest Autentication or SFTP
* @input RemoteFile : String  mandatory, file name at remote folder
* @input TempFolderFile : String  mandatory, file name at temporary folder
*
*/
importPackage( dw.system );
importPackage( dw.io );
importPackage( dw.net );

function execute( args : PipelineDictionary ) : Number
{

	// read parameters
	var remoteFolderURL : String = args.RemoteFolderURL;
 	var remoteLogin : String = args.RemoteLogin;
 	var remotePassword : String = args.RemotePassword;
 	var remoteFile : String = args.RemoteFile;
    var tempFolderFile : String = args.TempFolderFile;

    // check parameters
    if ( empty( remoteFolderURL ) )
    {
    	Logger.getLogger("simplefeeds").error( "UploadFeed: Parameter RemoteFolderURL empty" );
    	return PIPELET_ERROR;
    }

    if ( empty( remoteLogin ) )
    {
    	Logger.getLogger("simplefeeds").error( "UploadFeed: Parameter remoteLogin empty" );
    	return PIPELET_ERROR;
    }

    if ( empty( remotePassword ) )
    {
    	Logger.getLogger("simplefeeds").error( "UploadFeed: Parameter remotePassword empty" );
    	return PIPELET_ERROR;
    }

    if ( empty( remoteFile ) )
    {
    	Logger.getLogger("simplefeeds").error( "UploadFeed: Parameter remoteFile empty" );
    	return PIPELET_ERROR;
    }

    if ( empty( tempFolderFile ) )
    {
    	Logger.getLogger("simplefeeds").error( "UploadFeed: Parameter tempFolderFile empty" );
    	return PIPELET_ERROR;
    }
    
    if ( !uploadFile( remoteFolderURL, remoteLogin, remotePassword, remoteFile, tempFolderFile ) )
	{
		// error downloading file
		return PIPELET_ERROR;
	}

   return PIPELET_NEXT;
}

function uploadFile( remoteFolderURL : String, remoteLogin : String, remotePassword : String, remoteFile : String, file : String ) : boolean
{
	if ( remoteFolderURL.indexOf( "sftp://" ) == 0 )
	{
		return uploadFileSFTP( remoteFolderURL, remoteLogin, remotePassword, remoteFile, file );
	}
}


function uploadFileSFTP( remoteFolderURL : String, remoteLogin : String, remotePassword : String, remoteFile : String, file : String ) : boolean
{
	// connect to server
	var sftpClient : SFTPClient = connectSFTP( remoteFolderURL, remoteLogin, remotePassword );
	
	if ( sftpClient == null )
	{
		return false;
	}

    // parse URL, e.g. "sftp://sftp.myserver.com:22/folder/"
	var params : Array = /^sftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( remoteFolderURL );

	if ( params == null || params.length != 4 )
	{
    	Logger.getLogger("simplefeeds").error( "UploadFeed: Parameter RemoteFolderURL not recognized, RemoteFolderURL: " + remoteFolderURL );
    	return false;
	}

	var path : String = params[3];	

	// download file
	var localFile : File = new File(File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + file);
	var result : boolean;

	try
	{
		result = sftpClient.putBinary( path  ,  localFile);
	}
	catch ( ex )
	{
		Logger.getLogger("simplefeeds").error( "UploadFeed: Error while uploading " + path + remoteFile + " to " + localFile.fullPath + ": " + ex );		
		return false;
	}
	
	if ( !result )
	{
		Logger.getLogger("simplefeeds").error( "UploadFeed: Error while uploading " + path + remoteFile + " to " + localFile.fullPath + ": " +
			sftpClient.errorMessage );		
		return false;
	}

	sftpClient.disconnect();

	// compare file sizes
	var localFileSize : Number = localFile.length();
	var remoteFileSize : Number = remoteFile.length();
	
	if ( remoteFileSize != localFileSize )
	{
		Logger.getLogger("simplefeeds").error( "UploadFeed: Remote and local file sizes differ after upload: " +
			"remote: " + remoteFileSize + ", local: " + localFileSize );		
		return false;
	}

	// upload successfully
	return true;
}

function connectSFTP( remoteFolderURL : String, remoteLogin : String, remotePassword : String ) : SFTPClient
{
    // for SFTP remoteLogin and remotePassword are required
    if ( empty( remoteLogin ) )
    {
    	Logger.getLogger("simplefeeds").error( "DownloadFeed: Parameter RemoteLogin empty (required for SFTP)" );
    	return null;
    }

    if ( empty( remotePassword ) )
    {
    	Logger.getLogger("simplefeeds").error( "DownloadFeed: Parameter RemotePassword empty (required for SFTP)" );
    	return null;
    }

    // parse URL, e.g. "sftp://sftp.myserver.com:22/folder/"
	var params : Array = /^sftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( remoteFolderURL );

	if ( params == null || params.length != 4 )
	{
    	Logger.getLogger("simplefeeds").error( "DownloadFeed: Parameter RemoteFolderURL not recognized, RemoteFolderURL: " + remoteFolderURL );
    	return null;
	}

	var host : String = params[1];
	var port : Number = null;
	// params[2] is undefined if there was no port provided
	if ( params[2] != undefined )
	{
		port = new Number( params[2] );
	}
	
	var sftpClient : SFTPClient = new SFTPClient();
	var result : boolean;
	
	try
	{
		if ( port != null )
		{
			result = sftpClient.connect( host, port, remoteLogin, remotePassword );
		}
		else
		{
			// use default port
			result = sftpClient.connect( host, remoteLogin, remotePassword );
		}
	}
	catch ( ex )
	{
		Logger.getLogger("simplefeeds").error( "DownloadFeed: Error while connecting to " +
			host + ( ( port != null ) ? ( ":" + port ) : "" ) + ": " + ex );		
		return null;
	}

	if ( !result )
	{
		Logger.getLogger("simplefeeds").error( "DownloadFeed: Error while connecting to " +
			host + ( ( port != null ) ? ( ":" + port ) : "" ) + ": " + sftpClient.errorMessage );		
		return null;
	}

	return sftpClient;
}
