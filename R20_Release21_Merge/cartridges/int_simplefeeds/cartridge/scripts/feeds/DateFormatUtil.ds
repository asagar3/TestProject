/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input fileName : String	
*   @output sendMail : Boolean

*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.net );
importPackage( dw.io );
function compareTimeStamp(fileTimeStamp : Calendar, sitePrefTimeStamp : Calendar): boolean{
	
	if(fileTimeStamp.after(sitePrefTimeStamp)){
		return true;
	}
	else{
		return false;	
	}		
}

//Extract the date from file name
function formatDate(rawDate: String): Date{
	
	var finalDate : String = rawDate.substring(rawDate.indexOf("_")+1, rawDate.indexOf("."));
   	var dateObj : Date = createDateObj(finalDate);
	return dateObj;	
}

//Extract the date from file name
function getDateFromFileName(rawDate: String): Date{
	var fileNameTokens : Array = rawDate.split("_");	 
	var finalDate : String = fileNameTokens[1];
   	var dateObj : Date = createDateObj(finalDate);
	return dateObj;	
}

function createFrenchCatalogDateObj(rawDate: String): Date{
	 
	 var  fullDate :String = "";
	 var  hours : String = "";
	 var  mins : String = "";
	 var  secs : String = "";
	 var year : String = "";
	 var date : String = "";
	 var month : String = "";
	 var milli : String = "";
	 var finalDate : String = rawDate.substring(rawDate.indexOf("_")+1, rawDate.indexOf("."));
	
	 year = finalDate.substr(0, 4);
	 month = finalDate.substr(5, 2);
	 date = finalDate.substr(8, 2);
	 hours = finalDate.substr(11,2);
	 mins = finalDate.substr(13,2);
	 secs = finalDate.substr(15,2);
	 milli = finalDate.substr(17,3);
	 var dateObj : Date = new Date(year,month-1,date,hours,mins,secs,milli);
	 return dateObj;
}


function createPIMJobDateObjFromFileName(fileName: String): Date{
	 
	 var  fullDate :String = "";
	 var  hours : String = "";
	 var  mins : String = "";
	 var  secs : String = "";
	 var year : String = "";
	 var date : String = "";
	 var month : String = "";
	 var milli : String = "";
	 
	 var fileNameTokens : Array = fileName.split("_");
	 
	 var finalDate : String = fileNameTokens[1];
	
	 year = finalDate.substr(0, 4);
	 month = finalDate.substr(5, 2);
	 date = finalDate.substr(8, 2);
	 hours = finalDate.substr(11,2);
	 mins = finalDate.substr(13,2);
	 secs = finalDate.substr(15,2);
	 milli = finalDate.substr(17,3);
	 var dateObj : Date = new Date(year,month-1,date,hours,mins,secs,milli);
	 return dateObj;
}

function createDateObj(finalDate: String): Date{
	 
	 var  fullDate :String = "";
	 var  hours : String = "";
	 var  mins : String = "";
	 var  secs : String = "";
	 var year : String = "";
	 var date : String = "";
	 var month : String = "";
	 
	 fullDate  = finalDate.substring(0, finalDate.lastIndexOf("-"));
	 year = fullDate.substr(0, 4);
	 month = fullDate.substr(5, 2);
	 date = fullDate.substr(8, 10);
	 hours = finalDate.substring(finalDate.lastIndexOf("-")+1, finalDate.lastIndexOf("-")+3);
	 mins = finalDate.substring(finalDate.lastIndexOf("-")+3, finalDate.lastIndexOf("-")+5);
	  secs = finalDate.substring(finalDate.lastIndexOf("-")+5, finalDate.lastIndexOf("-")+7);
	 var dateObj : Date = new Date(year,month-1,date,hours,mins,secs);
	 return dateObj;
}

function createFullDateObj(finalDate: String): Date{
	 
	 var  fullDate :String = "";
	 var  hours : String = "";
	 var  mins : String = "";
	 var  secs : String = "";
	 var year : String = "";
	 var date : String = "";
	 var month : String = "";
	 var milli : String = "";
	 
	 fullDate  = finalDate.substring(0, finalDate.lastIndexOf("-"));
	 year = fullDate.substr(0, 4);
	 month = fullDate.substr(5, 2);
	 date = fullDate.substr(8, 10);
	 hours = finalDate.substring(finalDate.lastIndexOf("-")+1, finalDate.lastIndexOf("-")+3);
	 mins = finalDate.substring(finalDate.lastIndexOf("-")+3, finalDate.lastIndexOf("-")+5);
	  secs = finalDate.substring(finalDate.lastIndexOf("-")+5, finalDate.lastIndexOf("-")+7);
	  milli = finalDate.substring(finalDate.lastIndexOf("-")+7, finalDate.lastIndexOf("-")+10);
	 var dateObj : Date = new Date(year,month-1,date,hours,mins,secs,milli);
	 return dateObj;
}

function createIAADateObj(finalDate: String): Date{
	 
	 var  fullDate :String = "";
	 var  hours : String = "";
	 var  mins : String = "";
	 var  secs : String = "";
	 var year : String = "";
	 var date : String = "";
	 var month : String = "";
	 var milli : String = "";
	 
	 fullDate  = finalDate.substring(0, finalDate.lastIndexOf("-"));
	 year = fullDate.substr(0, 4);
	 month = fullDate.substr(5, 2);
	 date = fullDate.substr(8, 10);
	 hours = finalDate.substring(finalDate.lastIndexOf("-")+1, finalDate.lastIndexOf("-")+3);
	 mins = finalDate.substring(finalDate.lastIndexOf("-")+3, finalDate.lastIndexOf("-")+5);
	 secs = finalDate.substring(finalDate.lastIndexOf("-")+5, finalDate.lastIndexOf("-")+7);
	 milli = finalDate.substring(finalDate.lastIndexOf("-")+7, finalDate.lastIndexOf("-")+10);
	 var dateObj : Date = new Date(year,month-1,date,hours,mins,secs,milli);
	 return dateObj;
}

function renameRemoteFileSFTP( remoteFolderURL : String, remoteFile : String, remoteLogin : String, remotePassword : String ) : boolean
{
	
		
    // for SFTP remoteLogin and remotePassword are required
    if ( empty( remoteLogin ) )
    {
    	Logger.getLogger("simplefeeds").error( "DeleteFeed: Parameter RemoteLogin empty (required for SFTP)" );
    	return false;
    }

    if ( empty( remotePassword ) )
    {
    	Logger.getLogger("simplefeeds").error( "DeleteFeed: Parameter RemotePassword empty (required for SFTP)" );
    	return false;
    }

    // parse URL, e.g. "sftp://sftp.myserver.com:22/folder/"
	var params : Array = /^sftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( remoteFolderURL );

	if ( params == null || params.length != 4 )
	{
    	Logger.getLogger("simplefeeds").error( "DeleteFeed: Parameter RemoteFolderURL not recognized, RemoteFolderURL: " + remoteFolderURL );
    	return null;
	}

	var host : String = params[1];
	var port : Number = null;
	// params[2] is undefined if there was no port provided
	if ( params[2] != undefined )
	{
		port = new Number( params[2] );
	}
	//var path : String =remoteLogin + params[3];
	var path : String = params[3];
	var sftpClient : SFTPClient = new SFTPClient();
	var result : boolean;
	
	try
	{
		if ( port != null )
		{
			result = sftpClient.connect( host, port, remoteLogin, remotePassword );
		}
		else
		{
			// use default port
			result = sftpClient.connect( host, remoteLogin, remotePassword );
		}
	}
	catch ( ex )
	{
		Logger.getLogger("simplefeeds").error( "DeleteFeed: Error while connecting to " +
			host + ( ( port != null ) ? ( ":" + port ) : "" ) + ": " + ex );		
		return false;
	}

	if ( !result )
	{
		Logger.getLogger("simplefeeds").error( "DeleteFeed: Error while connecting to " +
			host + ( ( port != null ) ? ( ":" + port ) : "" ) + ": " + sftpClient.errorMessage );		
		return false;
	}

	try
	{
		sftpClient.cd(path);
		var newName : String = remoteFile.substring(0, 2)+"_OLDFILE"+remoteFile.substring(2, remoteFile.length);
		sftpClient.rename(remoteFile ,newName );
	}
	catch ( ex )
	{
		Logger.getLogger("simplefeeds").error( "DeleteFeed: Error while deleting " + path + remoteFile + ": " + ex );		
		return false;
	}

	if ( !result )
	{
		Logger.getLogger("simplefeeds").error( "DeleteFeed: Error while deleting " + path + remoteFile + ": " + sftpClient.errorMessage );		
		return false;
	}
	
	sftpClient.disconnect();
	
    return true;
}

function renameIMPEXFile(fileName : String,tempFolder : String){
	if(fileName.indexOf("/")>=0){
		fileName = fileName.substring(fileName.lastIndexOf("/")+1,fileName.length);
	}
	var fileObj : File = new File(File.IMPEX + "/src" + File.SEPARATOR + tempFolder + File.SEPARATOR + fileName);
	var newFileName : String = fileObj.name.substring(0, 2)+"_OLDFILE"+fileObj.name.substring(2, fileObj.name.length);
	var file : File = new File( File.IMPEX + "/src" + File.SEPARATOR + tempFolder + File.SEPARATOR + newFileName );
	fileObj.renameTo(file);
	return newFileName;
}