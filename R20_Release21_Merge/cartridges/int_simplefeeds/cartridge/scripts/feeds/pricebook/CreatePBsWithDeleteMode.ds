/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* @input DWPriceBooks : String  Name of the local file relative to the Impex share, src folder
* @input TimeStamp : String timestamp to add in the file name
* @input PidList : dw.util.Collection Name of the local file relative to the Impex share, src folder; changed after modification for Ireland Site
* @output DeletePriceBooks : String Name of the local file relative to the Impex share, src folder; changed after modification
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.object );
importPackage( dw.catalog );
importPackage( dw.io );
importPackage( dw.net );

var FILE_PATH : String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR ;
var TOP_NODE : String = "pricebooks";
var PRICETABLE_NODE : String = "price-table";
var ATTR_MODE_NAME : String = "mode";
var ATTR_MODE_VALUE : String = "delete";
var ATTR_PID_NAME : String = "product-id";
var ONLINE_FROM_NODE : String = "online-from";

function execute( pdict : PipelineDictionary ) : Number
{ 	
	//Modify the Master Catalog with the Changes Required for Ireland Site		
	pdict.DeletePriceBooks =  createPriceBooks(pdict.DWPriceBooks, pdict.TimeStamp, pdict.PidList);		
   	return PIPELET_NEXT;
}

function createPriceBooks(fileToRead : String, timestamp : String, pidList : Collection) : String {
	var currentDate : Date = new Date();	
	currentDate.setHours(0,0,0,0);
	
	//Creating (XML)File Reader
	var fileIn : File = new File(FILE_PATH + fileToRead);
	var fileReader : FileReader = new FileReader(fileIn);		
	var xmlReader : XMLStreamReader = new XMLStreamReader(fileReader);
		
	//Creating (XML)File Writer
	var fileToWrite : String = "Price" + File.SEPARATOR + "deletePriceTables_" + timestamp + ".xml";
	var fileOut : File = new File(FILE_PATH + fileToWrite);
	if (!fileOut.exists()){
		fileOut.createNewFile();
	}	
	var fileWriter : FileWriter = new FileWriter(fileOut);	
	var writer : XMLStreamWriter = new XMLStreamWriter(fileWriter);
	
	var parseEvent : Number = 0;
	var xml_element : XML = null;
	var isSiteId : Boolean = false;
	if (pidList!=null && !pidList.empty){
		try {
			//Start Writing the file
			while (xmlReader.hasNext()) {
				parseEvent = xmlReader.next();		
				if (parseEvent==XMLStreamConstants.START_ELEMENT)
				{
					if (xmlReader.getLocalName().equalsIgnoreCase(PRICETABLE_NODE)){
						var pid : String = getPid(xmlReader);
						if (pidList.contains(pid)){
							xml_element = xmlReader.XMLObject;
							if (isToDelete(xml_element, currentDate)){								
								//Create Price Table Tags
								createPriceTableElement(xml_element, writer);
							}
						}else{
							xml_element = xmlReader.XMLObject;
						}
					}
					else{
						//Create Normal Tags
						createElement(xmlReader, writer);
					}
				}else if (parseEvent==XMLStreamConstants.END_ELEMENT){
					writer.writeEndElement();
					writer.writeRaw("\r\n");	
				}			
			}	
			writer.writeEndElement();
			writer.writeRaw("\r\n");
			writer.writeEndDocument();
			writer.flush();
			writer.close();
			fileWriter.close();
			Logger.getLogger("DeleteFuturePriceEntries_IE").debug( "DeleteFuturePriceEntries: Changes are done successfully"); 
		} catch (ex){
			Logger.getLogger("DeleteFuturePriceEntries_IE").error( "DeleteFuturePriceEntries: Error in making Ireland Specific Chages" + ex );	
			return fileToWrite;
		}
	}
	return fileToWrite;
}

function createElement(xmlReader : XMLStreamReader, writer : XMLStreamWriter) : XMLStreamReader {
	var parseEventTemp : Number = 0;
	writer.writeStartElement(xmlReader.getLocalName());
	// Write nameSpace
	if (xmlReader.getLocalName().equalsIgnoreCase(TOP_NODE) && !empty(xmlReader.getNamespaceURI())){
		writer.writeDefaultNamespace(xmlReader.getNamespaceURI());
	}	
	// Create Attribues
	createAttributes(xmlReader, writer);
	parseEventTemp = xmlReader.next();
	//called if it is an empty node
	if (parseEventTemp==XMLStreamConstants.END_ELEMENT){
		writer.writeEndElement();
		writer.writeRaw("\r\n");
	// If children exist.
	} else if (parseEventTemp==XMLStreamConstants.START_ELEMENT){
		createElement(xmlReader, writer);
	}else if (parseEventTemp==XMLStreamConstants.CHARACTERS){
		writer.writeCharacters(xmlReader.getText());
	} 
	return xmlReader;
}

function createPriceTableElement(element_XML : XML, writer : XMLStreamWriter) : XMLStreamReader {	
	writer.writeStartElement(element_XML.localName().toString());
	//Write Attributes
	for each( var attr : XML in element_XML.attributes()) {
		writer.writeAttribute(attr.localName().toString(), attr.valueOf().toString());
	}
	//add the mode attribute
	writer.writeAttribute(ATTR_MODE_NAME, ATTR_MODE_VALUE);
			
	//Create Children
	for each( var child : XML in element_XML.children()) {
		if(child.localName()) {
			writer.writeStartElement(child.localName().toString());
			//Write Attributes
			for each( var attr : XML in child.attributes()) {
				writer.writeAttribute(attr.localName().toString(), attr.valueOf().toString());
			}
			writer.writeCharacters(child.valueOf().toString());
			writer.writeEndElement();
		}else if (child.nodeKind("text")){
			writer.writeCharacters(child.valueOf().toString());
		}		
	}		
	writer.writeEndElement();
	writer.writeRaw("\r\n");
}

function createAttributes(xmlReader : XMLStreamReader, writer : XMLStreamWriter) : XMLStreamReader {	
	var index : Number;
	var attrName : String;
	var attrValue : String;
	
	for (index=0; index<xmlReader.getAttributeCount(); index++){		
		if (!empty(xmlReader.getAttributePrefix(index))){
			attrName = xmlReader.getAttributePrefix(index) + ":" + xmlReader.getAttributeLocalName(index);
		}else {
			attrName = xmlReader.getAttributeLocalName(index);
		}	
		attrValue = xmlReader.getAttributeValue(index);						
		writer.writeAttribute(attrName, attrValue);
	}
	return xmlReader;
}

/** 
	method to identify, if the current price-table node needs to be deleted
*/
function isToDelete (element : XML, currentDate : Date) : Boolean {
	var toDelete : Boolean = false;
	var fromDate : Date = new Date();
	for each( var child : XML in element.children()) {
		if(child.localName()!=null && child.localName().toString().equalsIgnoreCase(ONLINE_FROM_NODE)) {
			var fromDateStr : String = child.valueOf().toString(); 
			fromDate = new Date(fromDateStr);						
			var dateDifference : Number = currentDate.getTime() - fromDate.getTime();			
			if (dateDifference <= 0){
				toDelete = true;
			}	
		}		
	}
	return toDelete;
}

function getPid(xmlReader : XMLStreamReader) : String {	
	var index : Number;	
	var attrValue : String = null;
	
	for (index=0; index<xmlReader.getAttributeCount(); index++){		
		if (ATTR_PID_NAME.equalsIgnoreCase(xmlReader.getAttributeLocalName(index))){
			attrValue = xmlReader.getAttributeValue(index);
		}				
	}	
	return attrValue;
}