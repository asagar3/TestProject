/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* @input File : String  Name of the local file relative to the Impex share, src folder
* @output PidList : dw.util.Collection Name of the local file relative to the Impex share, src folder; changed after modification for Ireland Site
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.object );
importPackage( dw.catalog );
importPackage( dw.io );
importPackage( dw.net );

var FILE_PATH : String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR;	
var ATTR_PID_NAME : String = "product-id";

function execute( pdict : PipelineDictionary ) : Number
{ 	
	//Modify the Master Catalog with the Changes Required for Ireland Site
	var pidList : Collection = CreatePidList(pdict.File);
	
	//Use for alerting ERROR email 
	if (pidList == null){
		return PIPELET_ERROR;
	}
	
	//@TODO: Use for alerting that no product id is available in the feed file;
	if (pidList.empty){
		return PIPELET_ERROR;
	}
	
	pdict.PidList = pidList;
   	return PIPELET_NEXT;

}

function CreatePidList(fileName : String) : HashSet {
	//Creating (XML)File Reader
	var fileIn : File = new File(FILE_PATH + fileName);
	var fileReader : FileReader = new FileReader(fileIn);		
	var xmlReader : XMLStreamReader = new XMLStreamReader(fileReader);
	
	var parseEvent : Number = 0;	
	var pidList : HashSet = new dw.util.HashSet();
	try {
		//Start Reading the file the file
		while (xmlReader.hasNext()) {
			parseEvent = xmlReader.next();
			if (parseEvent==XMLStreamConstants.START_ELEMENT) {
				if (xmlReader.getLocalName().equalsIgnoreCase("price-table")) {
					var pid : String = getPid(xmlReader);
					if (pid != null){
						pidList.add1(pid);
					}
				}
			}			
		}	
		Logger.getLogger("CreatePidList").debug( "CreatePidList: PidList is successfully created"); 
	} catch (ex){
		Logger.getLogger("CreatePidList").error( "CreatePidList: Error in Creating PidList. " + ex );	
		return pidList;
	}	
	return pidList;
}


function getPid(xmlReader : XMLStreamReader) : String {	
	var index : Number;	
	var attrValue : String = null;
	
	for (index=0; index<xmlReader.getAttributeCount(); index++){		
		if (ATTR_PID_NAME.equalsIgnoreCase(xmlReader.getAttributeLocalName(index))){
			attrValue = xmlReader.getAttributeValue(index);
		}				
	}	
	return attrValue;
}