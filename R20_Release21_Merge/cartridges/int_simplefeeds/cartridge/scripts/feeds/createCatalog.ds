/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*   @output xmlFileName : String
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.object );
importPackage( dw.catalog );
importPackage( dw.io );
importPackage( dw.net );

var numOfProd : Number = 0;
var impexPath : String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR; 
//var fname : String = "Ten_Product_Ids";
//var fname : String = "Fifty_Product_Ids";
//var fname : String = "Hundred_Product_Ids";
//var fname : String = "FiveHundred_Product_Ids";
//var fname : String = "Thousand_Product_Ids";
/** CATE ENVIRONMENT **/
//var fname : String = "Hundred_CATE";
//var fname : String = "Thousand_CATE";
//var fname : String = "FiveThousand_CATE";
//var fname : String = "TenThousand_CATE";
//var fname : String = "FiftyThousand_CATE";
var fname : String = "OneLakh_CATE";

function execute( pdict : PipelineDictionary ) : Number
{
	var scriptStartTime : Date = new Date();
	//Read Product IDs from the CSV file (File is at IMPEX location) and collect them in a set; set is used to avoid duplicate entries
	var prodIDs : HashSet = getProductIDs();
	//Get the site names for which the products need to be set as offLine; then names are read from sitepreference
	var siteNames : Array = new Array(); //dw.system.Site.getCurrent().getCustomPreferenceValue("SITE_NAMES"); 
	siteNames.push("FranceSite");
	//siteNames.push("IrelandSite");
	//siteNames.push("EUSite");
	
	//XM File path and name 
	var xmlFileName : String =  "csvFiles" + File.SEPARATOR + fname + ".xml"; 
	//Create the XML for all the product IDs	
	if (createXML ((impexPath+xmlFileName), prodIDs, siteNames)){
		pdict.xmlFileName = xmlFileName;	
	}
		
	var scriptEndTime : Date = new Date(); 
	var timeTaken : Number = scriptEndTime.getTime()-scriptStartTime.getTime();
	
	Logger.getLogger("OffLineProduct XML Creaion").error( "\n$#$#$#$#$#$#$#OfflineProduct: Total " + numOfProd + " products are made offline for " + siteNames.length + " Site(s)");
	Logger.getLogger("OffLineProduct XML Creaion").error( "\n***OfflineProduct: Time taken in executing the createCatalog.ds -- " +	timeTaken/1000 + "Seconds");	
	
   	return PIPELET_NEXT;
}

function getProductIDs() : Set {
	var fileName : String = "csvFiles" + File.SEPARATOR  + fname + ".csv";	    
	var file : File = new File(impexPath + fileName);
	var reader : FileReader = new FileReader(file);
	var csvReader : CSVStreamReader = new CSVStreamReader(reader);
	
	var csvSet : HashSet = new HashSet(); 
	var fileLineArray : Array = null;
	do {
		fileLineArray = csvReader.readNext();
		csvSet.add(fileLineArray);						
	} while (fileLineArray!=null);
	
	csvReader.close();
    return csvSet;
}

function createXML (newFileName : String, prodIDs : HashSet, siteNames : Array) :  Boolean {
	
	//Creating (XML)File Writer	
	var fileOut : File = new File(newFileName);
	if (!fileOut.exists()){
		fileOut.createNewFile();
	}	
	var fileWriter : FileWriter = new FileWriter(fileOut, "UTF-8");	
	var writer : XMLStreamWriter = new XMLStreamWriter(fileWriter);
	
	var prodIterator : Iterator = prodIDs.iterator();
	
	try {
		//Create Start and Catalog Tag
		writer.writeStartDocument();
		writer.writeStartElement("catalog");
		writer.writeAttribute("xmlns", "http://www.demandware.com/xml/impex/catalog/2006-10-31");
		writer.writeAttribute("catalog-id", "master-catalog");
		//Write Prodcut Tag for every prodcut ID
		while (prodIterator.hasNext()) {
			var productID : String = prodIterator.next();
			if (!empty(productID)) {			
				writer.writeStartElement("product");
				writer.writeAttribute("product-id", StringUtils.trim(productID));
				//Write Online flag tag for every site, selected in the sitepreference
				for (var i=0; i < siteNames.length; i++) {
					var siteId : String = siteNames[i];//.getDisplayValue();
					createOnlineTag(writer,siteId);
				}
				writer.writeEndElement();
				numOfProd = numOfProd+1;
			}			
		}

		writer.writeEndElement();
		writer.writeRaw("\r\n");	
		writer.writeEndDocument();
		writer.flush();
		writer.close();
		fileWriter.close();
		Logger.getLogger("OffLineProduct XML Creaion").debug( "OfflineProduct: Changes are done successfully"); 
	} catch (ex){
		Logger.getLogger("OffLineProduct XML Creaion").error( "OfflineProduct: Error in creating the XML" + ex );	
		return false;
	}	
	return true;
}

function createOnlineTag(writer : XMLStreamWriter, siteId : String) : Boolean {
	try {
		writer.writeStartElement("online-flag");
		writer.writeAttribute("site-id", StringUtils.trim(siteId));
		writer.writeCharacters("false");
		writer.writeEndElement();
	} catch (ex){
		Logger.getLogger("OffLineProduct XML Creaion").error( "OfflineProduct: Error in creating the online tag" + ex );
		return false;
	}	
	return true;	
}