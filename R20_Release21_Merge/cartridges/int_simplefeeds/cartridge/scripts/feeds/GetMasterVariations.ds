/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input masterSet : dw.util.HashSet This is a sample comment.
*   @input variationSet : dw.util.HashSet This is a sample comment.
*   @output variationSetOut : dw.util.HashSet This is a sample comment.
*
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.io );
importPackage( dw.util );
function execute( args : PipelineDictionary ) : Number
{
		var masterSet : HashSet = args.masterSet;
		var variationSet : HashSet = args.variationSet;
		try{
			var prodId : String = "";
			var masterProductObj : Product = null;
			var variationsItr: Iterator = null;
			var varProductObj: Product = null;
		 	var masterItr : Iterator = masterSet.iterator();
			while(masterItr.hasNext()) {
				masterProductObj = ProductMgr.getProduct(masterItr.next());
				variationsItr = masterProductObj.getVariationModel().getVariants().iterator();
				 while(variationsItr.hasNext())
					{
						varProductObj  = (Product)(variationsItr.next());
						if (varProductObj.getAvailabilityModel().getAvailabilityStatus().equals(ProductAvailabilityModel.AVAILABILITY_STATUS_IN_STOCK)) 
					 	{
						 	prodId = varProductObj.ID; 
						 	variationSet.add1(prodId);  
					 	}
					}
			}
	}
catch(e)
{
	Logger.error(String(e));
	return PIPELET_ERROR;
}
args.variationSetOut=variationSet;
   return PIPELET_NEXT;
}


