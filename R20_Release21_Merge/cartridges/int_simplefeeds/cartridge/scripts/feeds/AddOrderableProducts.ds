/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input prodItr : dw.util.Iterator This is a sample comment.
*   @input masterSet : dw.util.HashSet This is a sample comment.
*   @input productSet : dw.util.HashSet This is a sample comment.
*   @input normalSet : dw.util.HashSet This is a sample comment.
*   @output masterSetOut : dw.util.HashSet This is a sample comment.
*   @output productSetOut : dw.util.HashSet This is a sample comment.
*   @output normalSetOut : dw.util.HashSet This is a sample comment.
*/
importPackage( dw.catalog );
importPackage( dw.system );
importPackage( dw.io );
importPackage( dw.util );


function execute( args : PipelineDictionary ) : Number
{

	var allProductsItr : Iterator = args.prodItr;
	var masterSet : HashSet = args.masterSet;
	var normalSet : HashSet = args.normalSet;
	var productSet : HashSet = args.productSet;
	try
	{		
		while(allProductsItr.hasNext())
		{
		 //var productSetHashSet : HashSet = args.productSetIDs;
		 var prodId : String = "";
	 	var productObj: Product  = allProductsItr.next();
	 	if (!empty(productObj)) 
	 	{
		 	if (!productObj.master && !productObj.productSet) {
		 		prodId = productObj.ID;   
		 		normalSet.add(prodId);
		 	} else if (productObj.master) {
		 		masterSet.add1(productObj.ID);
		 	} else if (productObj.productSet) {
		 		productSet.add1(productObj.ID);
		 	} 
	 	}
		}
	} catch (e) {
		Logger.error(String(e));
		return PIPELET_ERROR;
	}
	args.masterSetOut = masterSet;
	args.productSetOut = productSet;
	args.normalSetOut = normalSet;
   return PIPELET_NEXT;
}
