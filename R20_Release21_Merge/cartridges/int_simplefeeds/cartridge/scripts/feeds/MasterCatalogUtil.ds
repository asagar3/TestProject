/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.object );
importPackage( dw.io );


importScript('feeds/FileUtil.ds');


var className : String = "MasterCatalogUtil";
/*


var orgFileName : String = "MS-Master-Catalog-Merge_2014-03-13-065313795_C3MSBK01.xml";
var orgFilePath : String = File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR;	

var sourcefolder : String = "archive-pim/Warning/2014-03-18/";
var destfolder : String = "catalog-pim-warnings/";




function execute( args : PipelineDictionary ) : Number
{

    // read pipeline dictionary input parameter
    // ... = args.ExampleIn;

    // insert business logic here

    // write pipeline dictionary output parameter

    // args.ExampleOut = ...
    var sourceFile : File = new File(orgFilePath+sourcefolder+orgFileName);
    var destFile : File = new File(orgFilePath+destfolder+orgFileName.replace(".xml","SETS.xml"));
    
    //moveFile(sourceFile, destFile);
    
    filterSetProducts(sourceFile, destFile);

   return PIPELET_NEXT;
}*/


function filterSetProducts(sourceFile : File, destFile : File) : Boolean {
	
	//Creating (XML)File Reader	
	var fileReader : FileReader = new FileReader(sourceFile);		
	var xmlReader : XMLStreamReader = new XMLStreamReader(fileReader);
		
	//Creating (XML)File Writer	
	//var fileOut : File = new File(sourceFile.getFullPath().replace(".xml","DS.xml"));
	if (!destFile.exists()){
		destFile.createNewFile();
	}	
	var fileWriter : FileWriter = new FileWriter(destFile, "UTF-8");	
	var writer : XMLStreamWriter = new XMLStreamWriter(fileWriter);
	
	writer.writeStartDocument("UTF-8", "1.0");
	
	var anySetProduct : boolean = false; 

	try {
		xmlReader.nextTag();
		writer.writeStartElement(xmlReader.getLocalName());
		writer.writeDefaultNamespace(xmlReader.getNamespaceURI());
		writer.writeAttribute(xmlReader.getAttributeLocalName(0), xmlReader.getAttributeValue(0));
		writer.writeCharacters("");
	
		//Start Writing the file
		while (xmlReader.hasNext()) {
			//parseEvent = xmlReader.next();		
			if (xmlReader.next() == XMLStreamConstants.START_ELEMENT)
			{	
				var localElementName : String = StringUtils.trim(xmlReader.getLocalName());
				var myProduct : XML = xmlReader.getXMLObject();
				var isSet : boolean = false;
				if (localElementName == "product"){
					var savedNameSpace = myProduct.namespace();
					var noNameSpaceString = myProduct.toString().replace(' xmlns="'+savedNameSpace+'"', '');
					var xmldocumentNoNS : XML = new XML(noNameSpaceString);					
					var setProducts : XMLList = xmldocumentNoNS.child("product-set-products");					
					if(!empty(setProducts) && setProducts.length()>0){						
						writer.writeRaw(myProduct.toXMLString());
						anySetProduct = true;
					}

				}
			}	
		}
		
		writer.writeEndElement();
		writer.writeEndDocument();	
		Logger.getLogger(className).debug( className+": Extract set product Changes are done successfully"); 
	} catch (ex){
		Logger.getLogger(className).error( className+": Failed to extract set products, Error in" + ex );	
	} finally{
		writer.flush();
		writer.close();
		fileWriter.close();		
		if(!anySetProduct){
			removeFileObject(destFile);
		}
	}
			
	return anySetProduct;	
}

