/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*   @input firstFileName : String First File content not exists in second file as well as ignore content contains "Parent_" and "Set_". Mainly catalog file
* 	@input secondFileName : String Second File Mainly Price file
*   @input compareResultFileName : String
* 	@output compareResultCount : Number
*   @output resultFileName : String
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.object );
importPackage( dw.catalog );
importPackage( dw.io );
importPackage( dw.net );
//global collection of unique data 
var firstSet : HashSet = new HashSet();
var secondSet : HashSet = new HashSet();
 
 
function uniqueCollection( textFile : String) : HashSet
{
	 var idCollection : HashSet = new HashSet();
	 var fileIn : File = new File(File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR+ textFile);
	 var fileReader : FileReader = new FileReader(fileIn);
	 var pid : String = fileReader.readLine();
	 while(pid!=null)
	 {
	  	idCollection.add(StringUtils.trim(pid));
	  	pid = fileReader.readLine();
	 }
	 fileReader.close();
	 return idCollection;
}
 
function compareCollection(resultFileName : String) : Number
{
	 var fileout : File = new File(File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR+ resultFileName);
	 var writer : FileWriter = new FileWriter(fileout);
 
	 if (!fileout.exists())
	 {
		fileout.createNewFile();
	 }
	 var prodId : String = "";
	 var count = 0;
	 var iterator : Iterator = firstSet.iterator();
	 while(iterator.hasNext())
	 {
	 	prodId = iterator.next();
	  if(prodId.indexOf("Parent_")<0 && prodId.indexOf("Set_")<0 && !secondSet.contains(prodId)) {
	  //count++;
	  
	  writer.writeLine(prodId);
	   }
	 }
	 writer.flush();
	 writer.close();
	 return count;
}
 
function execute( args : PipelineDictionary ) : Number
{
    args.compareResultCount = 0;
	if ( empty( args.firstFileName ) )
    {
    	Logger.error( "CompareFiles: firstFileName empty" + args.firstFileName );
    	return PIPELET_ERROR;
    }
    if ( empty( args.firstFileName ) )
    {
    	Logger.error( "CompareFiles: secondFileName empty"+ args.secondFileName );
    	return PIPELET_ERROR;
    }
    if ( empty( args.compareResultFileName ) )
    {
    	Logger.error( "CompareFiles: compareResultFileName empty" + args.compareResultFileName );
    	return PIPELET_ERROR;
    }
    
	 try{
		 firstSet = uniqueCollection(args.firstFileName);
		 secondSet = uniqueCollection(args.secondFileName);
		 var counter = compareCollection(args.compareResultFileName);
		 args.compareResultCount = counter;
		 args.resultFileName = args.compareResultFileName;
		 Logger.error("Comparison resulted in count : "+counter);
	     return PIPELET_NEXT;
	 }
	 catch(e)
	 {
		  Logger.error(String(e));
		  return PIPELET_ERROR;
 	 }
}
