/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.io );
function execute( args : PipelineDictionary ) : Number
{
	// read parameters
    var tempFolder : String = "Price";
    var filePattern : String = "Irish_Price_";
	

    //Check if file pattern file exists in temp folder
    // get list of all files in folder
	var impexFiles : Collection = listImpexFiles( tempFolder );
	if ( impexFiles == null )
	{
		// there was a technical problem
		// no more files to process
		return PIPELET_ERROR;
	}
	
    // filter list
    
	var fileNameMap : HashMap =  filterMatchingFiles( impexFiles, filePattern );
	//Size of map will be greater than 0 in case of Irish feed file
	var impexFile : SortedSet  = null;
	if(fileNameMap.size() > 0){
		impexFile = new SortedSet( fileNameMap.keySet() );
	}
	// Code to move file
	try{			
		if(fileNameMap.size() > 0){
			var iterator : Iterator = impexFile.iterator();
			while(iterator.hasNext()){
				var timestamp : String = iterator.next();
				var remoteFile : String = fileNameMap.get(timestamp);
					var localFile : dw.io.File = new File (File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "Price" + File.SEPARATOR + remoteFile);
					var fileOut : File = new File(File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "Price_Ireland" + File.SEPARATOR  + "Irish_Price_"+timestamp+remoteFile.substring(11,remoteFile.lastIndexOf("_"))+".xml");
					var result : Boolean;
					if (!fileOut.exists()){
						//rename
						result = localFile.renameTo(fileOut);
						Logger.getLogger("TransferFiles").error( "Irish price feed: original file: " + localFile.name );
						Logger.getLogger("TransferFiles").error( "Irish price feed: new file: " + fileOut.name );
					}
			}
		}
	}catch(e){
		Logger.error("transfer Irish price feed issue: "+e);	
		return PIPELET_ERROR;
	}
   return PIPELET_NEXT;

}
function listImpexFiles(folderURL : String) : Collection
{
	var folderObj : File = new File(File.IMPEX + "/src" + File.SEPARATOR + folderURL);
	
	var files : Array;
	
	var remoteFiles : Collection = new ArrayList();
	
	if ( folderObj.exists() ) {
		for each ( var file : File in folderObj.listFiles() )
		{
			// filter out directories; this will automatically remove the current folder from the list
			if ( !file.directory )
			{
				Logger.getLogger("TransferFiles").debug( "transfer Irish price feed: Listing file: " + file.name );
				remoteFiles.add( file.name );
			}		
		}
	}
	
	return remoteFiles;
}

function filterMatchingFiles( remoteFiles : Collection, remoteFilePattern : String ) : Collection
{
	var regExp : RegExp = new RegExp( remoteFilePattern );

	//var filteredRemoteFiles : Collection = new ArrayList();
	var fileNameMap : HashMap = new HashMap();
	for each ( var remoteFile : String in remoteFiles )
	{
		if ( regExp.test( remoteFile )  && !(remoteFile.indexOf("_OLDFILE") >= 0) )
		{
			Logger.getLogger("TransferFiles").debug( "transfer Irish price feed: Matching file: " + remoteFile );
			//Creating a HashMap for IrishPriceFeed with orig name as key & altered name as value
			if(remoteFile.indexOf(remoteFilePattern) >= 0){
				var timestamp : String = remoteFile.substring(remoteFile.lastIndexOf("_")+1, remoteFile.lastIndexOf(".xml"));
				fileNameMap.put(timestamp, remoteFile);
			}
		}
	}
	
	return fileNameMap;
}

