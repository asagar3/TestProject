/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
* @input TempFolder : String  mandatory, e.g. "inventory", folder is underneath Impex share, src folder
* @input FilePattern : String  mandatory, file name pattern at temporary folder
* @output PickFile : String  Name of the Original file relative to the Impex share, src folder
* @output TechnicalError : String  "TRUE" technical error occured, "FALSE" there are no more matching files
* @output StatusMessage : String
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.io );

function execute( args : PipelineDictionary ) : Number
{
		// indicate technical error as default, in case we error during processing
	// cnanged chetan args.TechnicalError = "TRUE";
	
	// read parameters
    var tempFolder : String = args.TempFolder;
    var filePattern : String = args.FilePattern;
    // check parameters
    if ( empty( tempFolder ) )
    {
    	Logger.getLogger("simplefeeds").error( "PickFeed: Parameter TempFolder empty" );
    	args.StatusMessage="Error Message:PickFeed: Parameter TempFolder empty";
    	args.TechnicalError = "TRUE";
    	return PIPELET_ERROR;
    }

    if ( empty( filePattern ) )
    {
    	Logger.getLogger("simplefeeds").error( "PickFeed: Parameter filePattern empty" );
    	args.StatusMessage="Error Message:PickFeed: Parameter filePattern empty";
    	args.TechnicalError = "TRUE";
    	return PIPELET_ERROR;
    }

    Logger.getLogger("simplefeeds").debug( "PickFeed: " +
    	"FilePattern: " + filePattern + ", " +
    	"TempFolder: " + tempFolder );	

    //Check if file pattern file exists in temp folder
    // get list of all files in folder
	var impexFiles : Collection = listImpexFiles( tempFolder );
	if ( impexFiles == null )
	{
		// there was a technical problem
		// no more files to process
		args.StatusMessage="Error Message:impexFiles == null";
		return PIPELET_ERROR;
	}
	
    // filter list
	impexFiles = filterMatchingFiles( impexFiles, filePattern );
	
	// sort list
	var impexFile : SortedSet  = new SortedSet( impexFiles );
	
	if ( impexFile.length == 0 )
	{
		// no more files to process
		args.StatusMessage="Error Message:impexFile.length == 0";
		return PIPELET_ERROR;
	}
	 
	// pick the first file from the collection
	args.PickFile = tempFolder + File.SEPARATOR + impexFile[0];	


   return PIPELET_NEXT;
}

function listImpexFiles(folderURL : String) : Collection
{
	var folderObj : File = new File(File.IMPEX + "/src" + File.SEPARATOR + folderURL);
	
	var files : Array;
	
	var remoteFiles : Collection = new ArrayList();
	
	if ( folderObj.exists() ) {
		for each ( var file : File in folderObj.listFiles() )
		{
			// filter out directories; this will automatically remove the current folder from the list
			if ( !file.directory )
			{
				Logger.getLogger("simplefeeds").debug( "PickFeed: Listing file: " + file.name );
				remoteFiles.add( file.name );
			}		
		}
	}
	
	return remoteFiles;
}

function filterMatchingFiles( remoteFiles : Collection, remoteFilePattern : String ) : Collection
{
	var regExp : RegExp = new RegExp( remoteFilePattern );

	var filteredRemoteFiles : Collection = new ArrayList();
	
	for each ( var remoteFile : String in remoteFiles )
	{
		if ( regExp.test( remoteFile )  && !(remoteFile.indexOf("_OLDFILE") >= 0) )
		{
			Logger.getLogger("simplefeeds").debug( "PickFeed: Matching file: " + remoteFile );
			filteredRemoteFiles.add( remoteFile );
		}
	}
	
	return filteredRemoteFiles;
}
